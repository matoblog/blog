{
  "hash": "0dd7ae2f125f69234c38ec58bc266334",
  "result": {
    "markdown": "---\ntitle: Estilo \"The Economist\" en Matplotlib\ndate: 2024-04-03\ndescription: Otro estilo pasado por el filtro matplotlib\ncategories: [codigo, python, gráficos, matplotlib, Financial Times]\nexecute: \n  enabled: true\n  freeze: auto \n---\n\nFuente: https://cast42.github.io/blog/cast42/jupyter/altair/2022/04/18/Economist-style.html\n\nFonts: https://github.com/FrancesCoronel/nyt-comm/tree/master/fonts/franklin\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns;\nfrom matplotlib.font_manager import FontProperties\n\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv('Economist_corbyn.csv').dropna()\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf['Average number of likes per Facebook post 2016'] = df['Average number of likes per Facebook post 2016']/1000\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# https://python-graph-gallery.com/custom-fonts-in-matplotlib/\n\n# !!! change it to your path\npersonal_path = '/home/mato/.local/share/fonts/'\n\n# get normal font and store it in `fira_sans_regular`\nfont = 'franklin-normal-300.ttf'\nfont_path = personal_path + font\nfranklin_thin = FontProperties(fname=font_path)\n\nfont = 'franklin-normal-600.ttf'\nfont_path = personal_path + font\nfranklin_bold = FontProperties(fname=font_path)\n\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncolors = ['#ff80a8','#bc466b', '#9fd4e2']\ncolor_map = { \n              \"barras\": '#116ea1',\n              \"barras_seleccionadas\": '#c1dae6',\n              \"lineas\": '#7d7369',\n              \"fondo\": '#d9e9f0',\n              \"titulo\":'#5c5a5b',\n              \"rectangulo\":'#c1dae6'\n            }\n\nfig, ax = plt.subplots(figsize=(8, 8),\n#                        dpi=450,\n                       facecolor = color_map['fondo'] # Color de fondo del gráfico\n                      ) \n\n\n# Color de fondo del canvas\nax.set_facecolor(color_map['fondo'])\n\n# Gráfico\nsns.barplot(x='Average number of likes per Facebook post 2016', y='Page', data=df,\n            label=\"Total\", color=color_map['barras'], \n            zorder=3,\n            width=0.7)\n\n# Seteamos la longitud y los titulos\nax.set(\n        xlim=(0, 6.05),\n        ylabel=\"\",\n        xlabel=\"\"\n)\n\n# Seteamos qué eje mostrar\nsns.despine(left=True, bottom=True)\n\n# Definimos grid sólo horizontal, que pase por detrás de las barras\nax.grid(axis='x', zorder=0)\n\n# Definimos los labels para el eje x y el eje y\nax.set_xticks(range(0,7))\nax.set_xticklabels(labels = [0, 1, 2, 3, 4, 5, 6],font=franklin_thin, fontsize=12)\nax.set_yticks(range(0,6))\nax.set_yticklabels(labels = df['Page'].unique(),font=franklin_thin, fontsize=12)\n\n\n# Desactivamos los ticks y seteamos font y tamaño\nax.tick_params(left= False, bottom=False)\nax.xaxis.set_tick_params(labeltop=True, \n                         labelbottom=False\n                        )\n\n# Eliminamos la leyenda que Matplolib inserta por defecto\nax.get_legend().remove()\n\n# Títulos\nfig.suptitle('Left-click', \n             font=franklin_bold,\n             fontweight =\"bold\", \n             fontsize=28, \n             x=0.0240, \n             y=1.07,\n            )\nplt.title('Average number of likes per facebook post 2016, `000',\n          font=franklin_thin,\n          fontweight =\"bold\", \n          fontsize=19,\n          y=1.115, \n          x=0.245\n         )\n\n# Cuadro rojo en título\nax.add_patch(Rectangle((-1.55,-2.25), 0.68,0.15, color='#ed1c24', clip_on=False, alpha=0.7))\n\n# Cuadro celeste en sobre la primer barra\nax.add_patch(Rectangle((-1.7,-0.4), 7.7,0.81, color=color_map['barras_seleccionadas'], clip_on=False, alpha=0.7,zorder = 3))\n\n# Eliminamos los labels de los yticks y ubicamos los nuevos para que queden alienados a la izquierda\n# Y ponemos en BOLD el primero \nax.set_yticklabels([]) \nlabels = df['Page'].unique()\nfor i, yi in enumerate(df['Page']):\n    if yi !='Jeremy Corbyn':\n        ax.text(-1.60, yi, \n                labels[i], \n                horizontalalignment='left', \n                font=franklin_thin, \n                verticalalignment='center', \n                fontsize= 16)\n    else:\n        ax.text(-1.60, yi,\n                labels[i], \n                horizontalalignment='left', \n                font=franklin_bold, \n                verticalalignment='center', \n                fontsize= 16)\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nrange(0,7)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nrange(0, 7)\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor i in range(0,6):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}