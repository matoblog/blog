{
  "hash": "2289ad6a6e7f775802b9e21c5caf16e6",
  "result": {
    "markdown": "---\ntitle: Storytelling with data\ndate: 2024-04-2\ndescription: Nadie sabe hacer gráficos que sirvan.\ncategories: [codigo, python, gráficos, plotly, libros, storytelling]\nexecute: \n  enabled: true\n  freeze: auto \n---\n\n## Arte, arte, arte.\n\n![Marta](arteartearte.jpg){width=30% fig-align=\"left\"}\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\n\nYo, el peor de todos.\n\nPor eso, me entregué al libro [\"Storytelling with Data: A Data Visualization Guide for Business Professionals\"](https://www.amazon.com/Storytelling-Data-Visualization-Business-Professionals/dp/1119002257) de Cole Nussbaumer Knaflic.\n\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficas. Pone el énfasis en pensar qué querés mostrar, para qué, cómo y a quién. Y lo explica a través de casos y gráficos, llevando las visualizaciones a un nivel `Supremo`.\n\nTiene una cosa muy interesante. Desde el principio se apoya en 3 o 4 gráficos puntuales, y a medida que se avanza en la lectura, los va mejorando con las herramientas que se van mostrando en cada capítulo. Eso genera que termines muy manija, y tengas un puñado de gráficos en la cabeza que quieras aplicar hasta para pagar el [Impuesto Inmobiliario](https://www.arba.gov.ar/GuiaTramites/categoriaTramite.asp?categ=35) en [ARBA](https://www.arba.gob.ar).\n\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de Python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\n\nY como lo que sobra en este mundo son patriotas, encontre al bueno de [@phillipheita](https://www.linkedin.com/in/phillip-heita/) y su artículo en Médium [Storytelling with data in Python](https://medium.com/@phillipheita/storytelling-with-data-in-python-a6e1eebfa91b), donde intenta replicar uno de los gráficos insignias del libro en Python y con [Matplotlib](https://matplotlib.org/). Aunque no lo crean, el patriota vino de Namibia (?)\n\nCómo siempre, [Murphy](https://es.wikipedia.org/wiki/Ley_de_Murphy) está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\n\nAl meter mano, pude ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después...sos un artista. \n\nA continuación una imágen del gráfico del libro. \n\n![Gráfico original del libro](grafico-libro.jpeg){fig-align=\"left\"}\n\nEl truco es tener cada serie de datos (`received` y `processed`) dividida por el punto (fecha en el caso que estamos analizando). En el `dataframe` tenemos las series completas. Pero en luego creamos dos series mas pequeñas, sólo con los datos a los cuales le queremos poner el `label`. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero nos permite mostrar los `labels` de las segundas y mas pequeñas series.\n\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los `labels` para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado.\n\n##  Código\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n## Importamos librerias\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns;sns.set_style()\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.DataFrame({'Month':['January','February','March','April','May','June','July','August','September','October','November','December'],\n                   'Ticket_Volume_Received':[160,184,241,149,180,161,132,202,160,139,149,177],\n                   'Ticket_Volume_Processed':[160,184,237,148,181,150,123,156,126,104,124,140]})\nnames= ['January','February','March','April','May','June','July','August','September','October','November','December']\nnames2= ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ny_data = [202,160,139,149,177]\nx_data = [7, 8, 9, 10, 11]\nn = [202,160,139,149,177]\n\ny1_data = [156,126,104,124,140]\nx1_data = [7, 8, 9, 10, 11]\nn1 = [156,126,104,124,140]\n\n%matplotlib inline\n\n\nmarkers_on = [202,160,139,149,177]\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\n\n# Varaibles que definen el subconjunto de datos que será graficada en otra línea\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Received'],\n             lw=4,\n             color='#808080',\n             ax=ax\n            )\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Processed'],\n             lw=4,\n             color='#000088',\n             ax=ax\n            )\n\n# Serie que define a que punto le ponemos lables. Esto es a partir del mes 7 (o posición 7 del eje x)\nsns.lineplot(x=x_data,y=y_data,marker='o',markersize=10,color='#808080',ax=ax)\nsns.lineplot(x= x1_data,y= y1_data,marker='o',markersize=10,color='#000088',ax=ax)\n\n# Títulos\nplt.suptitle('Please approve the hire of 2 employees', fontweight =\"bold\", fontsize=24, \n             ha='right',\n             color='#5c5a5b', \n            )\nplt.title('to backfill those who quit in the past year',fontsize=16,ha='right',va='top',color='#616161',\n          loc='left',\n          y=1.05, x=0.2425\n         )\n\n# Eliminamos el eje x (top) e y (right)\nsns.despine()\n\n# Definimos los colores de los ejes visibles x e y\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Leyenda manual de las líneas\nax.text(12.6, 180, 'Received', ha='right', va='top', fontsize=20,color='#808080')\nax.text(12.7, 145, 'Processed', ha='right', va='top', fontsize=20,color='#000088')\n\n# Texto\nplt.annotate(\"2 employees quit in May. We nearly kept up with incoming calls\\nin the following two months,\\\n but fell behind with the increase in\\nAug and haven't been able to catch up since.\",\n             xy=(4,60),xytext=(4,260),color='#616161',fontsize=18)\n\n# No ponemos titulo al eje Y. mas abajo le asignamos \"Number of calls\"\nplt.ylabel('')\n\n# Longitud del tick del eje y\nax.yaxis.set_tick_params(\n                        length=6\n                        )\n\n# Ancho de la línea de los ejes x e y\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n# Color y largo de las tick lines de ambos ejes\nax.tick_params(axis='x', color='#616161', pad=3)\n\n# Eliminamos los ticks del eje x\nplt.tick_params(bottom = False) \n\n\n# Color y tamaño de la fuente del texto de las ticklines del eje x e y\nplt.xticks(fontsize=16, ha='left', color='#616161')\nplt.yticks(fontsize=16, color='#616161')\n\n# Posición de los labels de los ejes x e y\nax.set_ylabel('Number of Calls', loc='top',fontsize=16,color='#616161')\nax.set_xlabel('2014', loc='left', fontsize=16, color='#616161')\n\n# Sacamos el valor 0 del eje x para que no arranque en enero\nplt.xlim(-0.05,11.5)\nplt.ylim(0,300)\n\n# Linea vertical\nplt.axvline(x=4, ymin=0, ymax=0.85, color='#616161', alpha=0.3)\n\n# Labels de los puntos del eje x (remplazamos números por meses)\nax.set(xticks=range(0, 12), xticklabels=list(names2))\n# plt.ylabel('Number of Calls',fontsize=16,color='#616161',ha='left',va='bottom')\n\n# Etiquetamos los puntos de la linea corta azul\nfor i, txt in enumerate(n):\n    ax.annotate(txt, (x_data[i]-0.2, y_data[i]+10),fontsize=16, color='#808080')\n    \n# Etiquetamos los puntos de la linea corta gris\nfor i, txt in enumerate(n1):\n    ax.annotate(txt, (x1_data[i]+0.25, y1_data[i]-20),\n                fontsize=16, color='#000088',\n                ha='right', va='bottom'\n               )\n\nfig.text(\n        0.05, 0.000,\n        'Data source: XYZ Dashboard, as of 12/31/2014 | A detailed analysis on tickets processed per person and time to resolve issues was undertaken to inform \\nthis request and can be provided if needed.',\n        ha='left',\n        fontsize=12,color='#808080');\n\n```\n\n::: {.cell-output .cell-output-display}\n![Esta es mi aproximación...](index_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}