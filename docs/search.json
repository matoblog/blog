[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Algunos pensamientos (no tan) brillantes",
    "section": "",
    "text": "Storytelling with data\n\n\n\n\n\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nmatplotlib\n\n\nlibros\n\n\nstorytelling\n\n\n\n\nNadie sabe hacer gráficos que sirvan.\n\n\n\n\n\n\nApr 2, 2024\n\n\nMatías\n\n\n\n\n\n\n  \n\n\n\n\nPrespuesto con Diagramas de Sankey\n\n\n\n\n\n\n\npresupuesto\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nplotly\n\n\n\n\nUn poco de presupuesto con dibujitos.\n\n\n\n\n\n\nMar 29, 2024\n\n\nMatías\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "draft/Graficos del Financial Times en Python/index.html",
    "href": "draft/Graficos del Financial Times en Python/index.html",
    "title": "Estilo “Financial Times” en Matplotlib",
    "section": "",
    "text": "https://medium.com/@romandogadin/style-your-visuals-like-the-financial-times-using-plotly-3e7f1d6e293d\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns;\n\n\ndata_quiet_quitters = [['2009','thriving',0.12],['2012','thriving',0.13],['2013','thriving',0.14],\n                       ['2014','thriving',0.14],['2015','thriving',0.15],['2016','thriving',0.17],\n                       ['2018','thriving',0.19],['2019','thriving',0.22],['2020','thriving',0.20],\n                       ['2021','thriving',0.21],['2022','thriving',0.23],\n\n                       ['2009','quiet_q',0.61],['2012','quiet_q',0.64],['2013','quiet_q',0.65],\n                       ['2014','quiet_q',0.68],['2015','quiet_q',0.65],['2016','quiet_q',0.66],\n                       ['2018','quiet_q',0.64],['2019','quiet_q',0.61],['2020','quiet_q',0.61],\n                       ['2021','quiet_q',0.60],['2022','quiet_q',0.59],\n                       \n                       ['2009','loud_q',0.27],['2012','loud_q',0.23],['2013','loud_q',0.21],\n                       ['2014','loud_q',0.18],['2015','loud_q',0.20],['2016','loud_q',0.17],\n                       ['2018','loud_q',0.17],['2019','loud_q',0.17],['2020','loud_q',0.19],\n                       ['2021','loud_q',0.19],['2022','loud_q',0.18],\n                      ]\n\n# create data frame\ndf = pd.DataFrame(\n    data=data_quiet_quitters, \n    columns=['year','type','count'])\n\n\n# https://python-graph-gallery.com/custom-fonts-in-matplotlib/\n\nfrom matplotlib.font_manager import FontProperties\n\n# !!! change it to your path\npersonal_path = '/home/mato/.local/share/fonts/'\n\n# get normal font and store it in `fira_sans_regular`\nfont_path = personal_path + 'Outfit-Black.ttf'\noutfit = FontProperties(fname=font_path)\n\nFalta: - Font outfit, mas ‘bold’, pero no tan ‘bold’ - Thicks hacia abajo en el eje x - Leyendas sin recuadro\nListar fonts en terminal: fc-list | grep “Outfit”\n\nlabels=''\n# Definimos la paleta de color para las barras\n# colors = [\"#ae4e6b\",\"#aad3e3\",\"#ef88a8\"] \ncolors = ['#ff80a8','#bc466b', '#9fd4e2']\ncolor_map = { \n#               \"lineas\": '#e4d9d0',\n              \"lineas\": '#7d7369',\n              \"fondo\": '#fdf1e6',\n              \"titulo\":'#5c5a5b'\n            }\n\nsns.set_palette(sns.color_palette(colors))\n\nfig, ax = plt.subplots(figsize=(15, 7),\n                       dpi=450,\n                       facecolor = color_map['fondo']) # Color de fondo del gráfico\n\nax = sns.histplot(df, x='year', \n                  hue='type', \n                  weights='count',\n                  multiple='stack', \n                  shrink=0.9,\n                  edgecolor=color_map['fondo'], # Color del borde de las barras \n                  linewidth=3.5,\n                  zorder=3\n                  )\n\n# Margen\nax.margins(0.01, 0)  \n\n# Definimos grid sólo horizontal\n# plt.grid(False)\nax.grid(axis='y', zorder=0)\n\n# Color de fondo del canvas\nax.set_facecolor(color_map['fondo'])\n\n# Color de la línea del eje x\nax.spines['bottom'].set_color(color_map['lineas'])\n\n# Labels sobre las barras\n# https://stackoverflow.com/questions/41296313/stacked-bar-chart-with-centered-labels\n# for c in ax.containers:\n#     ax.bar_label(c, fmt=lambda x: f'{x:.0%}' if x &gt; 0 else '', \n#                  color='w', \n#                  weight='bold',\n#                  padding=-20,\n#                  alpha=1)\nfor c in ax.containers:\n    ax.bar_label(c, fmt=lambda x: f'{x:.0%}' if x &gt; 0 else '', \n#                  label_type='center',\n                 color='w', \n                 weight='bold',\n                 padding=-20,)\n\n# Longitud del tick del eje y\nax.xaxis.set_tick_params(\n                        length=6,\n                        color= color_map['lineas']\n)\nax.yaxis.set_tick_params(\n                        length=0,\n                        color= color_map['lineas']\n)\n# Labels de los ticks del eje y\nax.set_yticks([0,.2,.40,.60,.80,1])\nax.set_yticklabels(['0%','20%','40%','60%','80%','100%'])\n# Font de los ticks\nplt.xticks(font=outfit)\nplt.yticks(font=outfit);\n# Colores de los ticks names\nax.tick_params(colors=color_map['lineas']) # Puede incluir axis='x' para sólo colorear el eje x\n\n# No ponemos titulo al eje Y ni al X\nplt.ylabel('')\nplt.xlabel('')\n\n# Eliminamos el eje x (top), y (right) e y (left)\nax.spines['bottom'].set_linewidth(1)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Eliminamos la leyenda que Matplolib inserta por defecto\nax.get_legend().remove()\n\n# Leyendas\nfig.legend(\n           bbox_to_anchor=(0.31, 1.03),\n           fancybox = True,\n           fontsize='medium', \n           labels=['Loud quitting (% actively disengaged)',\n                   'Quiet quitting (% not engaged)',\n                   'Thriving at work (% engaged)',],\n           edgecolor = color_map['fondo'],\n           facecolor = 'none'\n)\n\n# Coordinadas para linea negra y cuadro ojo\ny_pos = 1.25\nx_pos = -0.95\n# Linea negra sobre título\nax.add_patch(Rectangle((x_pos,y_pos+0.08),1,0.01,color='black', clip_on=False))\n# Cuadro rojo en título\nax.add_patch(Rectangle((x_pos,y_pos-0.01),2.32,0.07,color='#bc4668', clip_on=False, alpha=0.7))\n\n# Títulos\nplt.suptitle(\"'Quiet quitters' make up the majority of employees globally\", \n             fontsize=24, \n             y=y_pos-0.14, x=0.41,\n             color=color_map['titulo'], \n             font=outfit,\n            );\n\n\n\n\n\n\ndata = [['2005','A',.10],['2006','A',.15],['2007','A',.10],\n                       ['2005','B',.15],['2006','B',.70],['2007','B',.10],\n                       ['2005','C',.75],['2006','C',.15],['2007','C',.80]\n                      ]\n\n\ndf = pd.DataFrame(\n    data=data, \n    columns=['year','type','count'])\n\n\nfig, ax = plt.subplots(figsize=(15, 7),facecolor = '#fdf1e6')\nax.set_facecolor('#fdf1e6')\n\nax = sns.histplot(df, x='year', \n                  hue='type', \n                  weights='count',\n                  multiple='stack', \n                  shrink=1,\n                  linewidth=3.5,\n                  zorder=3\n                  )\n\n\n# Definimos grid sólo horizontal\n# plt.grid(False)\nax.grid(axis='y', zorder=0)\n\nax.get_legend().remove()\n\nfor c in ax.containers:\n    ax.bar_label(c, fmt=lambda x: f'{x:.0%}' if x &gt; 0 else '')"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "sankey\n\n\nHace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más que se me pasó por alto en la búsqueda)\nMe quedé con Plotly, aunque siempre prefiero Matplolib porque es mucho mas personalizable. En general, cuando el gráfico no es para integrar a un dashboar, Matplotlib cumple. Pero en este caso, el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nPara lograr el resultado esperado, es necesario tener en cuenta que el Diagrama de Sankey está compuesto por dos tipos de elementos:\n\nNodos: Bloques estáticos con un nombre.\nLinks: conección entre nodos que lleva cierto valor de un nodo a otro.\n\nEn plotly, lo traducimos como:\n\n´source´: Es el nodo de inicio. No es necesario tener multiples ´sources´ para tener mas profundidad.\n´target´: Es el nodo al que ´source´ se conecta.\n´value´: Es el volumen del flujo que conecta ´source´ y ´target´. Va a marcar el grosos de las líneas conectoras del diagrama.\n\nComo hay nodos que cumplen las dos funciones (los nodos intermedios, que reciben y envían información), el mismo nodo aparece en las columnas source y target.\nEn el ejemplo que vamos a trabajar, el flujo arranca desde la Finalidad-Función (source) hacia las Jurisdicciones (target). Luego, desde las Jurisdicciones (source) hacia los Servicios (target). Y por último, de los Servicios (source) a los Programas (target). Todas estas etapas tienen un valor asignado de crédito. El primero, el que sale de la Finalidad-Función hacía la Jurisdicción, incluye el total del crédito para esa Finalidad-Función en esa jurisdicción, que luego se desgrana entre servicios y programas. En el código, esos valores (crédito) lo obtenemos con los diferentes groupby para cada etapa.\nA continuación dejo el código con algunos comentarios. La base que subí ya tiene un pre proceso de ordenamiento y limpieza. Trabajé sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizada a la ejecución del 31/12/2023.\nLa base resultante está disponible en Github"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "sankey\n\n\nHace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más que se me pasó por alto en la búsqueda)\nMe quedé con Plotly, aunque siempre prefiero Matplolib porque es mucho mas personalizable. En general, cuando el gráfico no es para integrar a un dashboar, Matplotlib cumple. Pero en este caso, el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nPara lograr el resultado esperado, es necesario tener en cuenta que el Diagrama de Sankey está compuesto por dos tipos de elementos:\n\nNodos: Bloques estáticos con un nombre.\nLinks: conección entre nodos que lleva cierto valor de un nodo a otro.\n\nEn plotly, lo traducimos como:\n\n´source´: Es el nodo de inicio. No es necesario tener multiples ´sources´ para tener mas profundidad.\n´target´: Es el nodo al que ´source´ se conecta.\n´value´: Es el volumen del flujo que conecta ´source´ y ´target´. Va a marcar el grosos de las líneas conectoras del diagrama.\n\nComo hay nodos que cumplen las dos funciones (los nodos intermedios, que reciben y envían información), el mismo nodo aparece en las columnas source y target.\nEn el ejemplo que vamos a trabajar, el flujo arranca desde la Finalidad-Función (source) hacia las Jurisdicciones (target). Luego, desde las Jurisdicciones (source) hacia los Servicios (target). Y por último, de los Servicios (source) a los Programas (target). Todas estas etapas tienen un valor asignado de crédito. El primero, el que sale de la Finalidad-Función hacía la Jurisdicción, incluye el total del crédito para esa Finalidad-Función en esa jurisdicción, que luego se desgrana entre servicios y programas. En el código, esos valores (crédito) lo obtenemos con los diferentes groupby para cada etapa.\nA continuación dejo el código con algunos comentarios. La base que subí ya tiene un pre proceso de ordenamiento y limpieza. Trabajé sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizada a la ejecución del 31/12/2023.\nLa base resultante está disponible en Github"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html#código",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html#código",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "Código",
    "text": "Código\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n\ndf = pd.read_parquet('datos_sankey.parquet')\n\n\n# Filtramos la partida (la finalidad-función ya está filtrada en la base que cargamos)\ndf = df.loc[(df['inciso_id']==5) & (df['principal_id']==8) & (df['parcial_id']==1)]\n\n\ndf_grafico = df.groupby(['fin-fun','jurisdiccion_desc','servicio_desc','programa_desc']).agg(**{\n                                'credito_vigente_sum': ('credito_vigente', 'sum')\n                                }).reset_index()\n\n# 1-[fin-fun]=&gt;[jurisdiccion_desc]\ndf1 = df_grafico.groupby(['fin-fun', 'jurisdiccion_desc'])['credito_vigente_sum'].sum().reset_index()\ndf1.columns = ['source', 'target', 'value']\n\n# 2-[jurisdiccion_desc]=&gt;[servicio_desc]\ndf2 = df_grafico.groupby(['jurisdiccion_desc', 'servicio_desc'])['credito_vigente_sum'].sum().reset_index()\ndf2.columns = ['source', 'target', 'value']\n\n\n# 3-[servicio_desc]=&gt;[programa_desc]\ndf3 = df_grafico.groupby(['servicio_desc', 'programa_desc'])['credito_vigente_sum'].sum().reset_index()\ndf3.columns = ['source', 'target', 'value']\n\n# Juntamos toda la información en un DF: \nall_links = pd.concat([\n    df1, \n    df2,\n    df3\n], axis=0)\nall_links_desc = all_links.copy()\n\n# Para usar el parámetro 'label'\n# https://sparkbyexamples.com/pandas/pandas-find-unique-values-from-columns\nunique_source_target = list(pd.unique(all_links[['source', 'target']].values.ravel('K')))\n\n# Asignamos un número único a cada source y target\nmapping_dict = {k: v for v, k in enumerate(unique_source_target)}\n\n# Mapeamos todos los datos\nall_links['source'] = all_links['source'].map(mapping_dict)\nall_links['target'] = all_links['target'].map(mapping_dict)\n\n# Convertimos el dataframe a una lista para poder utilizarlo en plotly\nlinks_dict = all_links.to_dict(orient='list')\n\n# Código del Diagrama de Sankey Diagram \nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n        pad = 100, # Espacio vertical entre los nodos terminales\n        thickness = 10, # Ancho del rectángulo de los nodos\n        line = dict(color = \"black\", width = 1), # Línea que rodea el rectángulo de los nodos\n        label = unique_source_target,\n        color =['#6db9aa', '#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    ),\n    link = dict(\n        source = links_dict[\"source\"],\n        target = links_dict[\"target\"],\n        value = links_dict[\"value\"],\n        color = ['#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    )\n)])\n\nfig.update_layout(\n    title='&lt;span style=\"font-size: 30px;\"&gt;Ejecución de Partidas&lt;/span&gt;' + '&lt;br&gt;' +  '&lt;span style=\"font-size: 12px;\"&gt;5.8.1 Serv. Sociales - Vivienda y Urbanismo - Diferentes jurisdicciones&lt;br&gt;&lt;/span&gt;')\n\nfig.show()"
  },
  {
    "objectID": "posts/storytelling-with-data/index.html",
    "href": "posts/storytelling-with-data/index.html",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficas. Pone el énfasis en pensar qué querés mostrar, para qué, cómo y a quién. Y lo explica a través de casos y gráficos, llevando las visualizaciones a un nivel Supremo.\nTiene una cosa muy interesante. Desde el principio se apoya en 3 o 4 gráficos puntuales, y a medida que se avanza en la lectura, los va mejorando con las herramientas que se van mostrando en cada capítulo. Eso genera que termines muy manija, y tengas un puñado de gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de Python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en este mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en Python y con Matplotlib. Aunque no lo crean, el patriota vino de Namibia (?)\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nAl meter mano, pude ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) dividida por el punto (fecha en el caso que estamos analizando). En el dataframe tenemos las series completas. Pero en luego creamos dos series mas pequeñas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero nos permite mostrar los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado."
  },
  {
    "objectID": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "href": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficas. Pone el énfasis en pensar qué querés mostrar, para qué, cómo y a quién. Y lo explica a través de casos y gráficos, llevando las visualizaciones a un nivel Supremo.\nTiene una cosa muy interesante. Desde el principio se apoya en 3 o 4 gráficos puntuales, y a medida que se avanza en la lectura, los va mejorando con las herramientas que se van mostrando en cada capítulo. Eso genera que termines muy manija, y tengas un puñado de gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de Python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en este mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en Python y con Matplotlib. Aunque no lo crean, el patriota vino de Namibia (?)\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nAl meter mano, pude ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) dividida por el punto (fecha en el caso que estamos analizando). En el dataframe tenemos las series completas. Pero en luego creamos dos series mas pequeñas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero nos permite mostrar los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado."
  },
  {
    "objectID": "posts/storytelling-with-data/index.html#código",
    "href": "posts/storytelling-with-data/index.html#código",
    "title": "Storytelling with data",
    "section": "Código",
    "text": "Código\n\n## Importamos librerias\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns;sns.set_style()\n\n\ndf = pd.DataFrame({'Month':['January','February','March','April','May','June','July','August','September','October','November','December'],\n                   'Ticket_Volume_Received':[160,184,241,149,180,161,132,202,160,139,149,177],\n                   'Ticket_Volume_Processed':[160,184,237,148,181,150,123,156,126,104,124,140]})\nnames= ['January','February','March','April','May','June','July','August','September','October','November','December']\nnames2= ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n\ny_data = [202,160,139,149,177]\nx_data = [7, 8, 9, 10, 11]\nn = [202,160,139,149,177]\n\ny1_data = [156,126,104,124,140]\nx1_data = [7, 8, 9, 10, 11]\nn1 = [156,126,104,124,140]\n\n%matplotlib inline\n\n\nmarkers_on = [202,160,139,149,177]\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\n\n# Varaibles que definen el subconjunto de datos que será graficada en otra línea\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Received'],\n             lw=4,\n             color='#808080',\n             ax=ax\n            )\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Processed'],\n             lw=4,\n             color='#000088',\n             ax=ax\n            )\n\n# Serie que define a que punto le ponemos lables. Esto es a partir del mes 7 (o posición 7 del eje x)\nsns.lineplot(x=x_data,y=y_data,marker='o',markersize=10,color='#808080',ax=ax)\nsns.lineplot(x= x1_data,y= y1_data,marker='o',markersize=10,color='#000088',ax=ax)\n\n# Títulos\nplt.suptitle('Please approve the hire of 2 employees', fontweight =\"bold\", fontsize=24, \n             ha='right',\n             color='#5c5a5b', \n            )\nplt.title('to backfill those who quit in the past year',fontsize=16,ha='right',va='top',color='#616161',\n          loc='left',\n          y=1.05, x=0.2425\n         )\n\n# Eliminamos el eje x (top) e y (right)\nsns.despine()\n\n# Definimos los colores de los ejes visibles x e y\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Leyenda manual de las líneas\nax.text(12.6, 180, 'Received', ha='right', va='top', fontsize=20,color='#808080')\nax.text(12.7, 145, 'Processed', ha='right', va='top', fontsize=20,color='#000088')\n\n# Texto\nplt.annotate(\"2 employees quit in May. We nearly kept up with incoming calls\\nin the following two months,\\\n but fell behind with the increase in\\nAug and haven't been able to catch up since.\",\n             xy=(4,60),xytext=(4,260),color='#616161',fontsize=18)\n\n# No ponemos titulo al eje Y. mas abajo le asignamos \"Number of calls\"\nplt.ylabel('')\n\n# Longitud del tick del eje y\nax.yaxis.set_tick_params(\n                        length=6\n                        )\n\n# Ancho de la línea de los ejes x e y\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n# Color y largo de las tick lines de ambos ejes\nax.tick_params(axis='x', color='#616161', pad=3)\n\n# Eliminamos los ticks del eje x\nplt.tick_params(bottom = False) \n\n\n# Color y tamaño de la fuente del texto de las ticklines del eje x e y\nplt.xticks(fontsize=16, ha='left', color='#616161')\nplt.yticks(fontsize=16, color='#616161')\n\n# Posición de los labels de los ejes x e y\nax.set_ylabel('Number of Calls', loc='top',fontsize=16,color='#616161')\nax.set_xlabel('2014', loc='left', fontsize=16, color='#616161')\n\n# Sacamos el valor 0 del eje x para que no arranque en enero\nplt.xlim(-0.05,11.5)\nplt.ylim(0,300)\n\n# Linea vertical\nplt.axvline(x=4, ymin=0, ymax=0.85, color='#616161', alpha=0.3)\n\n# Labels de los puntos del eje x (remplazamos números por meses)\nax.set(xticks=range(0, 12), xticklabels=list(names2))\n\n# Etiquetamos los puntos de la linea corta azul\nfor i, txt in enumerate(n):\n    ax.annotate(txt, (x_data[i]-0.2, y_data[i]+10),fontsize=16, color='#808080')\n    \n# Etiquetamos los puntos de la linea corta gris\nfor i, txt in enumerate(n1):\n    ax.annotate(txt, (x1_data[i]+0.25, y1_data[i]-20),\n                fontsize=16, color='#000088',\n                ha='right', va='bottom'\n               )\n\nfig.text(\n        0.05, 0.000,\n        'Data source: XYZ Dashboard, as of 12/31/2014 | A detailed analysis on tickets processed per person and time to resolve issues was undertaken to inform \\nthis request and can be provided if needed.',\n        ha='left',\n        fontsize=12,color='#808080');\n\n\n\n\nEsta es mi aproximación…"
  },
  {
    "objectID": "draft/Graficos del Financial Times en Python/Financial Times.html",
    "href": "draft/Graficos del Financial Times en Python/Financial Times.html",
    "title": "La bruja en la escoba",
    "section": "",
    "text": "# https://medium.com/@romandogadin/style-your-visuals-like-the-financial-times-using-plotly-3e7f1d6e293d\n\n\n# import libraries\nimport pandas as pd\nimport plotly.express as px\n\n\n# populate data\ndata_quiet_quitters = [['2009','thriving',0.12],['2012','thriving',0.13],['2013','thriving',0.14],\n                       ['2014','thriving',0.14],['2015','thriving',0.15],['2016','thriving',0.17],\n                       ['2018','thriving',0.19],['2019','thriving',0.22],['2020','thriving',0.20],\n                       ['2021','thriving',0.21],['2022','thriving',0.23],\n\n                       ['2009','quiet_q',0.61],['2012','quiet_q',0.64],['2013','quiet_q',0.65],\n                       ['2014','quiet_q',0.68],['2015','quiet_q',0.65],['2016','quiet_q',0.66],\n                       ['2018','quiet_q',0.64],['2019','quiet_q',0.61],['2020','quiet_q',0.61],\n                       ['2021','quiet_q',0.60],['2022','quiet_q',0.59],\n                       \n                       ['2009','loud_q',0.27],['2012','loud_q',0.23],['2013','loud_q',0.21],\n                       ['2014','loud_q',0.18],['2015','loud_q',0.20],['2016','loud_q',0.17],\n                       ['2018','loud_q',0.17],['2019','loud_q',0.17],['2020','loud_q',0.19],\n                       ['2021','loud_q',0.19],['2022','loud_q',0.18],\n                      ]\n\n# create data frame\ndf_qq = pd.DataFrame(\n    data=data_quiet_quitters, \n    columns=['year','type','count'])\n\n\n# define colors for the chart\ncolor_map = { \"thriving\": 'rgb(170,211,227)', # light blue\n              \"quiet_q\": 'rgb(174,78,107)',   # maroon\n              \"loud_q\": 'rgb(239,136,168)'    # pink \n                     }\n\n# famous light salmon background\ncolor_background = 'rgb(253,241,230)'\n\n# specify new legend names\nnew_legend_names = {\n    'thriving': 'Thriving at work (% engaged)',\n    'quiet_q': 'Quiet quitting (% not engaged)',\n    'loud_q': 'Loud quitting (% actively disengaged)'\n}\n\n\n# define colors for the chart\ncolor_map = { \"thriving\": 'rgb(170,211,227)', # light blue\n              \"quiet_q\": 'rgb(174,78,107)',   # maroon\n              \"loud_q\": 'rgb(239,136,168)'    # pink \n                     }\n\n# famous light salmon background\ncolor_background = 'rgb(253,241,230)'\n\n# specify new legend names\nnew_legend_names = {\n    'thriving': 'Thriving at work (% engaged)',\n    'quiet_q': 'Quiet quitting (% not engaged)',\n    'loud_q': 'Loud quitting (% actively disengaged)'\n}\n\n\n# generate chart\nfig = px.bar(\n       df_qq, \n       x='year', \n       y='count', \n       color='type', \n       color_discrete_map = color_map,\n       text_auto='.0%',                # show data labels\n    )\n\n\nfig.update_layout(\n        font_family=\"Outfit\",\n        font_size = 13,\n        plot_bgcolor=color_background,  # change background color\n        yaxis={'tickformat': '.0%'},    # convert Y marks to % \n        legend_title=None,              # remove legend title\n        xaxis_title=None,               # remove X title\n        yaxis_title=None,               # remove Y title\n        legend_traceorder=\"reversed\",   # change legend order\n        title=\"'Quiet quitters' make up the majority of employees globally\"\n       )\n\n\n                                                \n\n\n\n# standardize font color\nfig.update_traces(\n        textfont_color='white'    # set data labels color \n                 )\n\n\n                                                \n\n\n\n# rename legend and hover-over text\nfig.for_each_trace(lambda t: t.update(name = new_legend_names[t.name],\n                                      legendgroup = new_legend_names[t.name],\n                                      hovertemplate = t.hovertemplate.replace(t.name, new_legend_names[t.name])))\n\n\n                                                \n\n\n\n# update X axis\nfig.update_xaxes(\n    ticks=\"outside\",                    # place ticks outside X-axis\n    ticklen=5,                          # ticks length\n    tickcolor='rgb(195,186,178)',       # ticks color\n    linecolor='rgb(203,193,185)'        # axis color\n)\n\n\n                                                \n\n\n\n# update Y axis\nfig.update_yaxes(\n    anchor=\"free\",                      # allows axis repositioning\n#     shift= -10,                         # shift tick labels left by 10 pixels\n    gridcolor=\"rgb(228,217,208)\"\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]