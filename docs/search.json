[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Acá va el titulo",
    "section": "",
    "text": "Storytelling with data\n\n\n\n\n\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nplotly\n\n\nlibros\n\n\nstorytelling\n\n\n\n\nNadie sabe hacer gráficos que sirvan.\n\n\n\n\n\n\nMar 29, 2024\n\n\nMatías\n\n\n\n\n\n\n  \n\n\n\n\nPrespuesto con Diagramas de Sankey\n\n\n\n\n\n\n\npresupuesto\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nplotly\n\n\n\n\nUn poco de presupuesto con dibujitos.\n\n\n\n\n\n\nMar 29, 2024\n\n\nMatías\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "Hace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más, que se me pasó en la búsqueda)\nMe quedé con Plotly. Siempre prefiero Matplolib porque es mucho mas personalizable. El gráfico no tenía destino de dashboard, donde si es necesario que permitan cierta interacción, pero el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nNo me voy a extender en el detalle del código, pero lo mas importante es saber que tiene estos diagramas poseen nodos, donde ingresa la información, y desde donde también sale. Para armar el dataframe para poder realizar el gráfico, no importa si recibe o envía información, es un nodo. Por este motivo, el dataframe tiene que tener una columna el nodo source, otra el nodo targety otra el valor que une esos puntos (el ‘flujo’).\nComo hay nodos que cumplen las dos funciones, es posible que el mismo nodo aparezca en las columnas source y target.\nA continuación dejo el código con algunos comentarios. La base es la resultante de un proceso sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizado a la ejecución del 31/12/2023.\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n\ndf = pd.read_parquet('datos_sankey.parquet')\n\n\n# Filtramos la partida (la finalidad-función ya está filtrada en la base que cargamos)\ndf = df.loc[(df['inciso_id']==5) & (df['principal_id']==8) & (df['parcial_id']==1)]\n\n\n# Sólo vamos a mostrar la 5.8.1, para una finalidad y función determinada.\n# Filtramos por inciso, principal, parcial\n\ndf_grafico = df.groupby(['fin-fun','jurisdiccion_desc','servicio_desc','programa_desc']).agg(**{\n                                'credito_vigente_sum': ('credito_vigente', 'sum')\n                                }).reset_index()\n\n# 1-[fin-fun]=&gt;[jurisdiccion_desc]\ndf1 = df_grafico.groupby(['fin-fun', 'jurisdiccion_desc'])['credito_vigente_sum'].sum().reset_index()\ndf1.columns = ['source', 'target', 'value']\n\n# 2-[jurisdiccion_desc]=&gt;[servicio_desc]\ndf2 = df_grafico.groupby(['jurisdiccion_desc', 'servicio_desc'])['credito_vigente_sum'].sum().reset_index()\ndf2.columns = ['source', 'target', 'value']\n\n\n# 3-[servicio_desc]=&gt;[programa_desc]\ndf3 = df_grafico.groupby(['servicio_desc', 'programa_desc'])['credito_vigente_sum'].sum().reset_index()\ndf3.columns = ['source', 'target', 'value']\n\n# Juntamos toda la información en un DF: \nall_links = pd.concat([\n    df1, \n    df2,\n    df3\n], axis=0)\nall_links_desc = all_links.copy()\n\n# Para usar el parámetro 'label'\n# https://sparkbyexamples.com/pandas/pandas-find-unique-values-from-columns\nunique_source_target = list(pd.unique(all_links[['source', 'target']].values.ravel('K')))\n\n# Asignamos un número único a cada source y target\nmapping_dict = {k: v for v, k in enumerate(unique_source_target)}\n\n# Mapeamos todos los datos\nall_links['source'] = all_links['source'].map(mapping_dict)\nall_links['target'] = all_links['target'].map(mapping_dict)\n\n# Convertimos el dataframe a una lista para poder utilizarlo en plotly\nlinks_dict = all_links.to_dict(orient='list')\n\n# Código del Diagrama de Sankey Diagram \nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n        pad = 100, # Espacio vertical entre los nodos terminales\n        thickness = 10, # Ancho del rectángulo de los nodos\n        line = dict(color = \"black\", width = 1), # Línea que rodea el rectángulo de los nodos\n        label = unique_source_target,\n        color =['#6db9aa', '#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    ),\n    link = dict(\n        source = links_dict[\"source\"],\n        target = links_dict[\"target\"],\n        value = links_dict[\"value\"],\n        color = ['#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    )\n)])\n\nfig.update_layout(\n    title='&lt;span style=\"font-size: 30px;\"&gt;Ejecución de Partidas&lt;/span&gt;' + '&lt;br&gt;' +  '&lt;span style=\"font-size: 12px;\"&gt;5.8.1 Serv. Sociales - Vivienda y Urbanismo - Diferentes jurisdicciones&lt;br&gt;&lt;/span&gt;')\n\nfig.show()"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "Hace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más, que se me pasó en la búsqueda)\nMe quedé con Plotly. Siempre prefiero Matplolib porque es mucho mas personalizable. El gráfico no tenía destino de dashboard, donde si es necesario que permitan cierta interacción, pero el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nNo me voy a extender en el detalle del código, pero lo mas importante es saber que tiene estos diagramas poseen nodos, donde ingresa la información, y desde donde también sale. Para armar el dataframe para poder realizar el gráfico, no importa si recibe o envía información, es un nodo. Por este motivo, el dataframe tiene que tener una columna el nodo source, otra el nodo targety otra el valor que une esos puntos (el ‘flujo’).\nComo hay nodos que cumplen las dos funciones, es posible que el mismo nodo aparezca en las columnas source y target.\nA continuación dejo el código con algunos comentarios. La base es la resultante de un proceso sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizado a la ejecución del 31/12/2023.\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n\ndf = pd.read_parquet('datos_sankey.parquet')\n\n\n# Filtramos la partida (la finalidad-función ya está filtrada en la base que cargamos)\ndf = df.loc[(df['inciso_id']==5) & (df['principal_id']==8) & (df['parcial_id']==1)]\n\n\n# Sólo vamos a mostrar la 5.8.1, para una finalidad y función determinada.\n# Filtramos por inciso, principal, parcial\n\ndf_grafico = df.groupby(['fin-fun','jurisdiccion_desc','servicio_desc','programa_desc']).agg(**{\n                                'credito_vigente_sum': ('credito_vigente', 'sum')\n                                }).reset_index()\n\n# 1-[fin-fun]=&gt;[jurisdiccion_desc]\ndf1 = df_grafico.groupby(['fin-fun', 'jurisdiccion_desc'])['credito_vigente_sum'].sum().reset_index()\ndf1.columns = ['source', 'target', 'value']\n\n# 2-[jurisdiccion_desc]=&gt;[servicio_desc]\ndf2 = df_grafico.groupby(['jurisdiccion_desc', 'servicio_desc'])['credito_vigente_sum'].sum().reset_index()\ndf2.columns = ['source', 'target', 'value']\n\n\n# 3-[servicio_desc]=&gt;[programa_desc]\ndf3 = df_grafico.groupby(['servicio_desc', 'programa_desc'])['credito_vigente_sum'].sum().reset_index()\ndf3.columns = ['source', 'target', 'value']\n\n# Juntamos toda la información en un DF: \nall_links = pd.concat([\n    df1, \n    df2,\n    df3\n], axis=0)\nall_links_desc = all_links.copy()\n\n# Para usar el parámetro 'label'\n# https://sparkbyexamples.com/pandas/pandas-find-unique-values-from-columns\nunique_source_target = list(pd.unique(all_links[['source', 'target']].values.ravel('K')))\n\n# Asignamos un número único a cada source y target\nmapping_dict = {k: v for v, k in enumerate(unique_source_target)}\n\n# Mapeamos todos los datos\nall_links['source'] = all_links['source'].map(mapping_dict)\nall_links['target'] = all_links['target'].map(mapping_dict)\n\n# Convertimos el dataframe a una lista para poder utilizarlo en plotly\nlinks_dict = all_links.to_dict(orient='list')\n\n# Código del Diagrama de Sankey Diagram \nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n        pad = 100, # Espacio vertical entre los nodos terminales\n        thickness = 10, # Ancho del rectángulo de los nodos\n        line = dict(color = \"black\", width = 1), # Línea que rodea el rectángulo de los nodos\n        label = unique_source_target,\n        color =['#6db9aa', '#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    ),\n    link = dict(\n        source = links_dict[\"source\"],\n        target = links_dict[\"target\"],\n        value = links_dict[\"value\"],\n        color = ['#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    )\n)])\n\nfig.update_layout(\n    title='&lt;span style=\"font-size: 30px;\"&gt;Ejecución de Partidas&lt;/span&gt;' + '&lt;br&gt;' +  '&lt;span style=\"font-size: 12px;\"&gt;5.8.1 Serv. Sociales - Vivienda y Urbanismo - Diferentes jurisdicciones&lt;br&gt;&lt;/span&gt;')\n\nfig.show()"
  },
  {
    "objectID": "posts/storytelling-with-data/index.html",
    "href": "posts/storytelling-with-data/index.html",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficos. Pensar qué querés mostrar, para qué, cómo y para quién. Y lo explica a través de casos y gráficos, mejorándo los que podría hacer yo para llevarlos a nivel Supremo.\nDesde el principio al final se apoya en algunos gráficos puntales, modificandolos y explicando el por qué, paso a paso. Eso genera que termines muy manija, y tengas 5 gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en ese mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en python y con Matplotlib. El patriota finalmente vino de Namibia…\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nPara lo que me sirvió, es para ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) ‘partida’ en dos. En el dataframe tenemos las series completas. Pero en luego creamos dos series mas chicas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero sólo mostramos los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado.\n\n## Importamos librerias\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns;sns.set_style()\n\n\ndf = pd.DataFrame({'Month':['January','February','March','April','May','June','July','August','September','October','November','December'],\n                   'Ticket_Volume_Received':[160,184,241,149,180,161,132,202,160,139,149,177],\n                   'Ticket_Volume_Processed':[160,184,237,148,181,150,123,156,126,104,124,140]})\nnames= ['January','February','March','April','May','June','July','August','September','October','November','December']\nnames2= ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n\ny_data = [202,160,139,149,177]\nx_data = [7, 8, 9, 10, 11]\nn = [202,160,139,149,177]\n\ny1_data = [156,126,104,124,140]\nx1_data = [7, 8, 9, 10, 11]\nn1 = [156,126,104,124,140]\n\n%matplotlib inline\n\n\nmarkers_on = [202,160,139,149,177]\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\n\n# Varaibles que definen el subconjunto de datos que será graficada en otra línea\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Received'],\n             lw=4,\n             color='#808080',\n             ax=ax\n            )\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Processed'],\n             lw=4,\n             color='#000088',\n             ax=ax\n            )\n\n# Serie que define a que punto le ponemos lables. Esto es a partir del mes 7 (o posición 7 del eje x)\nsns.lineplot(x=x_data,y=y_data,marker='o',markersize=10,color='#808080',ax=ax)\nsns.lineplot(x= x1_data,y= y1_data,marker='o',markersize=10,color='#000088',ax=ax)\n\n# Títulos\nplt.suptitle('Please approve the hire of 2 employees', fontweight =\"bold\", fontsize=24, \n             ha='right',\n             color='#5c5a5b', \n            )\nplt.title('to backfill those who quit in the past year',fontsize=16,ha='right',va='top',color='#616161',\n          loc='left',\n          y=1.05, x=0.2425\n         )\n\n# Eliminamos el eje x (top) e y (right)\nsns.despine()\n\n# Definimos los colores de los ejes visibles x e y\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Leyenda manual de las líneas\nax.text(12.6, 180, 'Received', ha='right', va='top', fontsize=20,color='#808080')\nax.text(12.7, 145, 'Processed', ha='right', va='top', fontsize=20,color='#000088')\n\n# Texto\nplt.annotate(\"2 employees quit in May. We nearly kept up with incoming calls\\nin the following two months,\\\n but fell behind with the increase in\\nAug and haven't been able to catch up since.\",\n             xy=(4,60),xytext=(4,260),color='#616161',fontsize=18)\n\n# No ponemos titulo al eje Y. mas abajo le asignamos \"Number of calls\"\nplt.ylabel('')\n\n# Longitud del tick del eje y\nax.yaxis.set_tick_params(\n                        length=6\n                        )\n\n# Ancho de la línea de los ejes x e y\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n# Color y largo de las tick lines de ambos ejes\nax.tick_params(axis='x', color='#616161', pad=3)\n\n# Eliminamos los ticks del eje x\nplt.tick_params(bottom = False) \n\n\n# Color y tamaño de la fuente del texto de las ticklines del eje x e y\nplt.xticks(fontsize=16, ha='left', color='#616161')\nplt.yticks(fontsize=16, color='#616161')\n\n# Posición de los labels de los ejes x e y\nax.set_ylabel('Number of Calls', loc='top',fontsize=16,color='#616161')\nax.set_xlabel('2014', loc='left', fontsize=16, color='#616161')\n\n# Sacamos el valor 0 del eje x para que no arranque en enero\nplt.xlim(-0.05,11.5)\nplt.ylim(0,300)\n\n# Linea vertical\nplt.axvline(x=4, ymin=0, ymax=0.85, color='#616161', alpha=0.3)\n\n# Labels de los puntos del eje x (remplazamos números por meses)\nax.set(xticks=range(0, 12), xticklabels=list(names2))\n# plt.ylabel('Number of Calls',fontsize=16,color='#616161',ha='left',va='bottom')\n\n# Etiquetamos los puntos de la linea corta azul\nfor i, txt in enumerate(n):\n    ax.annotate(txt, (x_data[i]-0.2, y_data[i]+10),fontsize=16, color='#808080')\n    \n# Etiquetamos los puntos de la linea corta gris\nfor i, txt in enumerate(n1):\n    ax.annotate(txt, (x1_data[i]+0.25, y1_data[i]-20),\n                fontsize=16, color='#000088',\n                ha='right', va='bottom'\n               )\n\nfig.text(\n        0.05, 0.000,\n        'Data source: XYZ Dashboard, as of 12/31/2014 | A detailed analysis on tickets processed per person and time to resolve issues was undertaken to inform \\nthis request and can be provided if needed.',\n        ha='left',\n        fontsize=12,color='#808080');\n\n\n\n\nEsta es mi aproximación…"
  },
  {
    "objectID": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "href": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficos. Pensar qué querés mostrar, para qué, cómo y para quién. Y lo explica a través de casos y gráficos, mejorándo los que podría hacer yo para llevarlos a nivel Supremo.\nDesde el principio al final se apoya en algunos gráficos puntales, modificandolos y explicando el por qué, paso a paso. Eso genera que termines muy manija, y tengas 5 gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en ese mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en python y con Matplotlib. El patriota finalmente vino de Namibia…\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nPara lo que me sirvió, es para ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) ‘partida’ en dos. En el dataframe tenemos las series completas. Pero en luego creamos dos series mas chicas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero sólo mostramos los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado.\n\n## Importamos librerias\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns;sns.set_style()\n\n\ndf = pd.DataFrame({'Month':['January','February','March','April','May','June','July','August','September','October','November','December'],\n                   'Ticket_Volume_Received':[160,184,241,149,180,161,132,202,160,139,149,177],\n                   'Ticket_Volume_Processed':[160,184,237,148,181,150,123,156,126,104,124,140]})\nnames= ['January','February','March','April','May','June','July','August','September','October','November','December']\nnames2= ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n\ny_data = [202,160,139,149,177]\nx_data = [7, 8, 9, 10, 11]\nn = [202,160,139,149,177]\n\ny1_data = [156,126,104,124,140]\nx1_data = [7, 8, 9, 10, 11]\nn1 = [156,126,104,124,140]\n\n%matplotlib inline\n\n\nmarkers_on = [202,160,139,149,177]\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\n\n# Varaibles que definen el subconjunto de datos que será graficada en otra línea\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Received'],\n             lw=4,\n             color='#808080',\n             ax=ax\n            )\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Processed'],\n             lw=4,\n             color='#000088',\n             ax=ax\n            )\n\n# Serie que define a que punto le ponemos lables. Esto es a partir del mes 7 (o posición 7 del eje x)\nsns.lineplot(x=x_data,y=y_data,marker='o',markersize=10,color='#808080',ax=ax)\nsns.lineplot(x= x1_data,y= y1_data,marker='o',markersize=10,color='#000088',ax=ax)\n\n# Títulos\nplt.suptitle('Please approve the hire of 2 employees', fontweight =\"bold\", fontsize=24, \n             ha='right',\n             color='#5c5a5b', \n            )\nplt.title('to backfill those who quit in the past year',fontsize=16,ha='right',va='top',color='#616161',\n          loc='left',\n          y=1.05, x=0.2425\n         )\n\n# Eliminamos el eje x (top) e y (right)\nsns.despine()\n\n# Definimos los colores de los ejes visibles x e y\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Leyenda manual de las líneas\nax.text(12.6, 180, 'Received', ha='right', va='top', fontsize=20,color='#808080')\nax.text(12.7, 145, 'Processed', ha='right', va='top', fontsize=20,color='#000088')\n\n# Texto\nplt.annotate(\"2 employees quit in May. We nearly kept up with incoming calls\\nin the following two months,\\\n but fell behind with the increase in\\nAug and haven't been able to catch up since.\",\n             xy=(4,60),xytext=(4,260),color='#616161',fontsize=18)\n\n# No ponemos titulo al eje Y. mas abajo le asignamos \"Number of calls\"\nplt.ylabel('')\n\n# Longitud del tick del eje y\nax.yaxis.set_tick_params(\n                        length=6\n                        )\n\n# Ancho de la línea de los ejes x e y\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n# Color y largo de las tick lines de ambos ejes\nax.tick_params(axis='x', color='#616161', pad=3)\n\n# Eliminamos los ticks del eje x\nplt.tick_params(bottom = False) \n\n\n# Color y tamaño de la fuente del texto de las ticklines del eje x e y\nplt.xticks(fontsize=16, ha='left', color='#616161')\nplt.yticks(fontsize=16, color='#616161')\n\n# Posición de los labels de los ejes x e y\nax.set_ylabel('Number of Calls', loc='top',fontsize=16,color='#616161')\nax.set_xlabel('2014', loc='left', fontsize=16, color='#616161')\n\n# Sacamos el valor 0 del eje x para que no arranque en enero\nplt.xlim(-0.05,11.5)\nplt.ylim(0,300)\n\n# Linea vertical\nplt.axvline(x=4, ymin=0, ymax=0.85, color='#616161', alpha=0.3)\n\n# Labels de los puntos del eje x (remplazamos números por meses)\nax.set(xticks=range(0, 12), xticklabels=list(names2))\n# plt.ylabel('Number of Calls',fontsize=16,color='#616161',ha='left',va='bottom')\n\n# Etiquetamos los puntos de la linea corta azul\nfor i, txt in enumerate(n):\n    ax.annotate(txt, (x_data[i]-0.2, y_data[i]+10),fontsize=16, color='#808080')\n    \n# Etiquetamos los puntos de la linea corta gris\nfor i, txt in enumerate(n1):\n    ax.annotate(txt, (x1_data[i]+0.25, y1_data[i]-20),\n                fontsize=16, color='#000088',\n                ha='right', va='bottom'\n               )\n\nfig.text(\n        0.05, 0.000,\n        'Data source: XYZ Dashboard, as of 12/31/2014 | A detailed analysis on tickets processed per person and time to resolve issues was undertaken to inform \\nthis request and can be provided if needed.',\n        ha='left',\n        fontsize=12,color='#808080');\n\n\n\n\nEsta es mi aproximación…"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]