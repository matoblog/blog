[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Algunos pensamientos (no tan) brillantes",
    "section": "",
    "text": "Storytelling with data\n\n\n\n\n\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nmatplotlib\n\n\nlibros\n\n\nstorytelling\n\n\n\n\nNadie sabe hacer gráficos que sirvan.\n\n\n\n\n\n\nApr 2, 2024\n\n\nMatías\n\n\n\n\n\n\n  \n\n\n\n\nPrespuesto con Diagramas de Sankey\n\n\n\n\n\n\n\npresupuesto\n\n\ncodigo\n\n\npython\n\n\ngráficos\n\n\nplotly\n\n\n\n\nUn poco de presupuesto con dibujitos.\n\n\n\n\n\n\nMar 29, 2024\n\n\nMatías\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "draft/Listando tipografías instaladas/index.html",
    "href": "draft/Listando tipografías instaladas/index.html",
    "title": "Listando tipografías disponibles para Matplotlib",
    "section": "",
    "text": "Fuente: https://jonathansoma.com/lede/foundations-2018/matplotlib/list-all-fonts-available-in-matplotlib-plus-samples/\n\nimport matplotlib.font_manager\nfrom IPython.core.display import HTML\n\ndef make_html(fontname):\n    return \"&lt;p&gt;{font}: &lt;span style='font-family:{font}; font-size: 24px;'&gt;{font}&lt;/p&gt;\".format(font=fontname)\n\ncode = \"\\n\".join([make_html(font) for font in sorted(set([f.name for f in matplotlib.font_manager.fontManager.ttflist]))])\n\nHTML(\"&lt;div style='column-count: 2;'&gt;{}&lt;/div&gt;\".format(code))\n\nAbyssinica SIL: Abyssinica SIL\nAndale Mono: Andale Mono\nAni: Ani\nAnjaliOldLipi: AnjaliOldLipi\nArial: Arial\nArial Black: Arial Black\nC059: C059\nCaladea: Caladea\nCarlito: Carlito\nChandas: Chandas\nChilanka: Chilanka\nComic Sans MS: Comic Sans MS\nCourier New: Courier New\nD050000L: D050000L\nDejaVu Math TeX Gyre: DejaVu Math TeX Gyre\nDejaVu Sans: DejaVu Sans\nDejaVu Sans Display: DejaVu Sans Display\nDejaVu Sans Mono: DejaVu Sans Mono\nDejaVu Serif: DejaVu Serif\nDejaVu Serif Display: DejaVu Serif Display\nDhurjati: Dhurjati\nDroid Sans Fallback: Droid Sans Fallback\nDyuthi: Dyuthi\nFira Code: Fira Code\nFont Awesome 5 Brands: Font Awesome 5 Brands\nFont Awesome 5 Free: Font Awesome 5 Free\nFont Awesome 6 Free: Font Awesome 6 Free\nFontAwesome: FontAwesome\nFreeMono: FreeMono\nFreeSans: FreeSans\nFreeSerif: FreeSerif\nGargi: Gargi\nGaruda: Garuda\nGayathri: Gayathri\nGentium: Gentium\nGentium Basic: Gentium Basic\nGentium Book Basic: Gentium Book Basic\nGentiumAlt: GentiumAlt\nGeorgia: Georgia\nGidugu: Gidugu\nGubbi: Gubbi\nGurajada: Gurajada\nImpact: Impact\nInconsolata: Inconsolata\nInter: Inter\nJamrul: Jamrul\nJetBrainsMono Nerd Font Propo: JetBrainsMono Nerd Font Propo\nKacstArt: KacstArt\nKacstBook: KacstBook\nKacstDecorative: KacstDecorative\nKacstDigital: KacstDigital\nKacstFarsi: KacstFarsi\nKacstLetter: KacstLetter\nKacstNaskh: KacstNaskh\nKacstOffice: KacstOffice\nKacstOne: KacstOne\nKacstPen: KacstPen\nKacstPoster: KacstPoster\nKacstQurn: KacstQurn\nKacstScreen: KacstScreen\nKacstTitle: KacstTitle\nKacstTitleL: KacstTitleL\nKalapi: Kalapi\nKalimati: Kalimati\nKarumbi: Karumbi\nKeraleeyam: Keraleeyam\nKhmer OS: Khmer OS\nKhmer OS System: Khmer OS System\nKinnari: Kinnari\nLKLUG: LKLUG\nLakkiReddy: LakkiReddy\nLaksaman: Laksaman\nLeague Spartan: League Spartan\nLiberation Mono: Liberation Mono\nLiberation Sans: Liberation Sans\nLiberation Sans Narrow: Liberation Sans Narrow\nLiberation Serif: Liberation Serif\nLikhan: Likhan\nLinux Biolinum Keyboard O: Linux Biolinum Keyboard O\nLinux Biolinum O: Linux Biolinum O\nLinux Libertine Display O: Linux Libertine Display O\nLinux Libertine Initials O: Linux Libertine Initials O\nLinux Libertine Mono O: Linux Libertine Mono O\nLinux Libertine O: Linux Libertine O\nLohit Assamese: Lohit Assamese\nLohit Bengali: Lohit Bengali\nLohit Devanagari: Lohit Devanagari\nLohit Gujarati: Lohit Gujarati\nLohit Gurmukhi: Lohit Gurmukhi\nLohit Kannada: Lohit Kannada\nLohit Malayalam: Lohit Malayalam\nLohit Odia: Lohit Odia\nLohit Tamil: Lohit Tamil\nLohit Tamil Classical: Lohit Tamil Classical\nLohit Telugu: Lohit Telugu\nLoma: Loma\nMallanna: Mallanna\nMandali: Mandali\nManjari: Manjari\nMaterial Icons: Material Icons\nMeera: Meera\nMitra : Mitra \nMukti: Mukti\nNATS: NATS\nNTR: NTR\nNakula: Nakula\nNavilu: Navilu\nNimbus Mono PS: Nimbus Mono PS\nNimbus Roman: Nimbus Roman\nNimbus Sans: Nimbus Sans\nNimbus Sans Narrow: Nimbus Sans Narrow\nNorasi: Norasi\nNoto Kufi Arabic: Noto Kufi Arabic\nNoto Looped Lao: Noto Looped Lao\nNoto Looped Lao UI: Noto Looped Lao UI\nNoto Looped Thai: Noto Looped Thai\nNoto Looped Thai UI: Noto Looped Thai UI\nNoto Mono: Noto Mono\nNoto Music: Noto Music\nNoto Naskh Arabic: Noto Naskh Arabic\nNoto Naskh Arabic UI: Noto Naskh Arabic UI\nNoto Nastaliq Urdu: Noto Nastaliq Urdu\nNoto Rashi Hebrew: Noto Rashi Hebrew\nNoto Sans: Noto Sans\nNoto Sans Adlam: Noto Sans Adlam\nNoto Sans Adlam Unjoined: Noto Sans Adlam Unjoined\nNoto Sans Anatolian Hieroglyphs: Noto Sans Anatolian Hieroglyphs\nNoto Sans Arabic: Noto Sans Arabic\nNoto Sans Arabic UI: Noto Sans Arabic UI\nNoto Sans Armenian: Noto Sans Armenian\nNoto Sans Avestan: Noto Sans Avestan\nNoto Sans Balinese: Noto Sans Balinese\nNoto Sans Bamum: Noto Sans Bamum\nNoto Sans Bassa Vah: Noto Sans Bassa Vah\nNoto Sans Batak: Noto Sans Batak\nNoto Sans Bengali: Noto Sans Bengali\nNoto Sans Bengali UI: Noto Sans Bengali UI\nNoto Sans Bhaiksuki: Noto Sans Bhaiksuki\nNoto Sans Brahmi: Noto Sans Brahmi\nNoto Sans Buginese: Noto Sans Buginese\nNoto Sans Buhid: Noto Sans Buhid\nNoto Sans CJK JP: Noto Sans CJK JP\nNoto Sans Canadian Aboriginal: Noto Sans Canadian Aboriginal\nNoto Sans Carian: Noto Sans Carian\nNoto Sans Caucasian Albanian: Noto Sans Caucasian Albanian\nNoto Sans Chakma: Noto Sans Chakma\nNoto Sans Cham: Noto Sans Cham\nNoto Sans Cherokee: Noto Sans Cherokee\nNoto Sans Coptic: Noto Sans Coptic\nNoto Sans Cuneiform: Noto Sans Cuneiform\nNoto Sans Cypriot: Noto Sans Cypriot\nNoto Sans Deseret: Noto Sans Deseret\nNoto Sans Devanagari: Noto Sans Devanagari\nNoto Sans Devanagari UI: Noto Sans Devanagari UI\nNoto Sans Display: Noto Sans Display\nNoto Sans Duployan: Noto Sans Duployan\nNoto Sans Egyptian Hieroglyphs: Noto Sans Egyptian Hieroglyphs\nNoto Sans Elbasan: Noto Sans Elbasan\nNoto Sans Elymaic: Noto Sans Elymaic\nNoto Sans Ethiopic: Noto Sans Ethiopic\nNoto Sans Georgian: Noto Sans Georgian\nNoto Sans Glagolitic: Noto Sans Glagolitic\nNoto Sans Gothic: Noto Sans Gothic\nNoto Sans Grantha: Noto Sans Grantha\nNoto Sans Gujarati: Noto Sans Gujarati\nNoto Sans Gujarati UI: Noto Sans Gujarati UI\nNoto Sans Gunjala Gondi: Noto Sans Gunjala Gondi\nNoto Sans Gurmukhi: Noto Sans Gurmukhi\nNoto Sans Gurmukhi UI: Noto Sans Gurmukhi UI\nNoto Sans Hanifi Rohingya: Noto Sans Hanifi Rohingya\nNoto Sans Hanunoo: Noto Sans Hanunoo\nNoto Sans Hatran: Noto Sans Hatran\nNoto Sans Hebrew: Noto Sans Hebrew\nNoto Sans Imperial Aramaic: Noto Sans Imperial Aramaic\nNoto Sans Indic Siyaq Numbers: Noto Sans Indic Siyaq Numbers\nNoto Sans Inscriptional Pahlavi: Noto Sans Inscriptional Pahlavi\nNoto Sans Inscriptional Parthian: Noto Sans Inscriptional Parthian\nNoto Sans Javanese: Noto Sans Javanese\nNoto Sans Kaithi: Noto Sans Kaithi\nNoto Sans Kannada: Noto Sans Kannada\nNoto Sans Kannada UI: Noto Sans Kannada UI\nNoto Sans Kayah Li: Noto Sans Kayah Li\nNoto Sans Kharoshthi: Noto Sans Kharoshthi\nNoto Sans Khmer: Noto Sans Khmer\nNoto Sans Khmer UI: Noto Sans Khmer UI\nNoto Sans Khojki: Noto Sans Khojki\nNoto Sans Khudawadi: Noto Sans Khudawadi\nNoto Sans Lao: Noto Sans Lao\nNoto Sans Lao UI: Noto Sans Lao UI\nNoto Sans Lepcha: Noto Sans Lepcha\nNoto Sans Limbu: Noto Sans Limbu\nNoto Sans Linear A: Noto Sans Linear A\nNoto Sans Linear B: Noto Sans Linear B\nNoto Sans Lisu: Noto Sans Lisu\nNoto Sans Lycian: Noto Sans Lycian\nNoto Sans Lydian: Noto Sans Lydian\nNoto Sans Mahajani: Noto Sans Mahajani\nNoto Sans Malayalam: Noto Sans Malayalam\nNoto Sans Malayalam UI: Noto Sans Malayalam UI\nNoto Sans Mandaic: Noto Sans Mandaic\nNoto Sans Manichaean: Noto Sans Manichaean\nNoto Sans Marchen: Noto Sans Marchen\nNoto Sans Masaram Gondi: Noto Sans Masaram Gondi\nNoto Sans Math: Noto Sans Math\nNoto Sans Mayan Numerals: Noto Sans Mayan Numerals\nNoto Sans Medefaidrin: Noto Sans Medefaidrin\nNoto Sans Meetei Mayek: Noto Sans Meetei Mayek\nNoto Sans Mende Kikakui: Noto Sans Mende Kikakui\nNoto Sans Meroitic: Noto Sans Meroitic\nNoto Sans Miao: Noto Sans Miao\nNoto Sans Modi: Noto Sans Modi\nNoto Sans Mongolian: Noto Sans Mongolian\nNoto Sans Mono: Noto Sans Mono\nNoto Sans Mro: Noto Sans Mro\nNoto Sans Multani: Noto Sans Multani\nNoto Sans Myanmar: Noto Sans Myanmar\nNoto Sans Myanmar UI: Noto Sans Myanmar UI\nNoto Sans NKo: Noto Sans NKo\nNoto Sans Nabataean: Noto Sans Nabataean\nNoto Sans New Tai Lue: Noto Sans New Tai Lue\nNoto Sans Newa: Noto Sans Newa\nNoto Sans Nushu: Noto Sans Nushu\nNoto Sans Ogham: Noto Sans Ogham\nNoto Sans Ol Chiki: Noto Sans Ol Chiki\nNoto Sans Old Hungarian: Noto Sans Old Hungarian\nNoto Sans Old Italic: Noto Sans Old Italic\nNoto Sans Old North Arabian: Noto Sans Old North Arabian\nNoto Sans Old Permic: Noto Sans Old Permic\nNoto Sans Old Persian: Noto Sans Old Persian\nNoto Sans Old Sogdian: Noto Sans Old Sogdian\nNoto Sans Old South Arabian: Noto Sans Old South Arabian\nNoto Sans Old Turkic: Noto Sans Old Turkic\nNoto Sans Oriya: Noto Sans Oriya\nNoto Sans Oriya UI: Noto Sans Oriya UI\nNoto Sans Osage: Noto Sans Osage\nNoto Sans Osmanya: Noto Sans Osmanya\nNoto Sans Pahawh Hmong: Noto Sans Pahawh Hmong\nNoto Sans Palmyrene: Noto Sans Palmyrene\nNoto Sans Pau Cin Hau: Noto Sans Pau Cin Hau\nNoto Sans PhagsPa: Noto Sans PhagsPa\nNoto Sans Phoenician: Noto Sans Phoenician\nNoto Sans Psalter Pahlavi: Noto Sans Psalter Pahlavi\nNoto Sans Rejang: Noto Sans Rejang\nNoto Sans Runic: Noto Sans Runic\nNoto Sans Samaritan: Noto Sans Samaritan\nNoto Sans Saurashtra: Noto Sans Saurashtra\nNoto Sans Sharada: Noto Sans Sharada\nNoto Sans Shavian: Noto Sans Shavian\nNoto Sans Siddham: Noto Sans Siddham\nNoto Sans SignWriting: Noto Sans SignWriting\nNoto Sans Sinhala: Noto Sans Sinhala\nNoto Sans Sinhala UI: Noto Sans Sinhala UI\nNoto Sans Sogdian: Noto Sans Sogdian\nNoto Sans Sora Sompeng: Noto Sans Sora Sompeng\nNoto Sans Soyombo: Noto Sans Soyombo\nNoto Sans Sundanese: Noto Sans Sundanese\nNoto Sans Syloti Nagri: Noto Sans Syloti Nagri\nNoto Sans Symbols: Noto Sans Symbols\nNoto Sans Symbols2: Noto Sans Symbols2\nNoto Sans Syriac: Noto Sans Syriac\nNoto Sans Tagalog: Noto Sans Tagalog\nNoto Sans Tagbanwa: Noto Sans Tagbanwa\nNoto Sans Tai Le: Noto Sans Tai Le\nNoto Sans Tai Tham: Noto Sans Tai Tham\nNoto Sans Tai Viet: Noto Sans Tai Viet\nNoto Sans Takri: Noto Sans Takri\nNoto Sans Tamil: Noto Sans Tamil\nNoto Sans Tamil Supplement: Noto Sans Tamil Supplement\nNoto Sans Tamil UI: Noto Sans Tamil UI\nNoto Sans Telugu: Noto Sans Telugu\nNoto Sans Telugu UI: Noto Sans Telugu UI\nNoto Sans Thaana: Noto Sans Thaana\nNoto Sans Thai: Noto Sans Thai\nNoto Sans Thai UI: Noto Sans Thai UI\nNoto Sans Tifinagh: Noto Sans Tifinagh\nNoto Sans Tifinagh APT: Noto Sans Tifinagh APT\nNoto Sans Tifinagh Adrar: Noto Sans Tifinagh Adrar\nNoto Sans Tifinagh Agraw Imazighen: Noto Sans Tifinagh Agraw Imazighen\nNoto Sans Tifinagh Ahaggar: Noto Sans Tifinagh Ahaggar\nNoto Sans Tifinagh Air: Noto Sans Tifinagh Air\nNoto Sans Tifinagh Azawagh: Noto Sans Tifinagh Azawagh\nNoto Sans Tifinagh Ghat: Noto Sans Tifinagh Ghat\nNoto Sans Tifinagh Hawad: Noto Sans Tifinagh Hawad\nNoto Sans Tifinagh Rhissa Ixa: Noto Sans Tifinagh Rhissa Ixa\nNoto Sans Tifinagh SIL: Noto Sans Tifinagh SIL\nNoto Sans Tifinagh Tawellemmet: Noto Sans Tifinagh Tawellemmet\nNoto Sans Tirhuta: Noto Sans Tirhuta\nNoto Sans Ugaritic: Noto Sans Ugaritic\nNoto Sans Vai: Noto Sans Vai\nNoto Sans Wancho: Noto Sans Wancho\nNoto Sans Warang Citi: Noto Sans Warang Citi\nNoto Sans Yi: Noto Sans Yi\nNoto Sans Zanabazar Square: Noto Sans Zanabazar Square\nNoto Serif: Noto Serif\nNoto Serif Ahom: Noto Serif Ahom\nNoto Serif Armenian: Noto Serif Armenian\nNoto Serif Balinese: Noto Serif Balinese\nNoto Serif Bengali: Noto Serif Bengali\nNoto Serif CJK JP: Noto Serif CJK JP\nNoto Serif Devanagari: Noto Serif Devanagari\nNoto Serif Display: Noto Serif Display\nNoto Serif Dogra: Noto Serif Dogra\nNoto Serif Ethiopic: Noto Serif Ethiopic\nNoto Serif Georgian: Noto Serif Georgian\nNoto Serif Grantha: Noto Serif Grantha\nNoto Serif Gujarati: Noto Serif Gujarati\nNoto Serif Gurmukhi: Noto Serif Gurmukhi\nNoto Serif Hebrew: Noto Serif Hebrew\nNoto Serif Hmong Nyiakeng: Noto Serif Hmong Nyiakeng\nNoto Serif Kannada: Noto Serif Kannada\nNoto Serif Khmer: Noto Serif Khmer\nNoto Serif Khojki: Noto Serif Khojki\nNoto Serif Lao: Noto Serif Lao\nNoto Serif Malayalam: Noto Serif Malayalam\nNoto Serif Myanmar: Noto Serif Myanmar\nNoto Serif Sinhala: Noto Serif Sinhala\nNoto Serif Tamil: Noto Serif Tamil\nNoto Serif Tamil Slanted: Noto Serif Tamil Slanted\nNoto Serif Tangut: Noto Serif Tangut\nNoto Serif Telugu: Noto Serif Telugu\nNoto Serif Thai: Noto Serif Thai\nNoto Serif Tibetan: Noto Serif Tibetan\nNoto Serif Yezidi: Noto Serif Yezidi\nNoto Traditional Nushu: Noto Traditional Nushu\nOpenSymbol: OpenSymbol\nOutfit: Outfit\nP052: P052\nPadauk: Padauk\nPadauk Book: Padauk Book\nPagul: Pagul\nPalatino Linotype: Palatino Linotype\nPeddana: Peddana\nPhetsarath OT: Phetsarath OT\nPonnala: Ponnala\nPothana2000: Pothana2000\nPotti Sreeramulu: Potti Sreeramulu\nPurisa: Purisa\nRachana: Rachana\nRaghuMalayalamSans: RaghuMalayalamSans\nRamabhadra: Ramabhadra\nRamaraja: Ramaraja\nRasa: Rasa\nRaviPrakash: RaviPrakash\nRekha: Rekha\nRoboto: Roboto\nRoboto Condensed: Roboto Condensed\nSFNS Display: SFNS Display\nSTIXGeneral: STIXGeneral\nSTIXNonUnicode: STIXNonUnicode\nSTIXSizeFiveSym: STIXSizeFiveSym\nSTIXSizeFourSym: STIXSizeFourSym\nSTIXSizeOneSym: STIXSizeOneSym\nSTIXSizeThreeSym: STIXSizeThreeSym\nSTIXSizeTwoSym: STIXSizeTwoSym\nSaab: Saab\nSahadeva: Sahadeva\nSamanata: Samanata\nSamyak Devanagari: Samyak Devanagari\nSamyak Gujarati: Samyak Gujarati\nSamyak Malayalam: Samyak Malayalam\nSamyak Tamil: Samyak Tamil\nSarai: Sarai\nSawasdee: Sawasdee\nSource Code Pro: Source Code Pro\nSree Krushnadevaraya: Sree Krushnadevaraya\nStandard Symbols PS: Standard Symbols PS\nSuranna: Suranna\nSuravaram: Suravaram\nSuruma: Suruma\nSyamala Ramana: Syamala Ramana\nTenaliRamakrishna: TenaliRamakrishna\nTibetan Machine Uni: Tibetan Machine Uni\nTimes New Roman: Times New Roman\nTimmana: Timmana\nTlwg Mono: Tlwg Mono\nTlwg Typewriter: Tlwg Typewriter\nTlwg Typist: Tlwg Typist\nTlwg Typo: Tlwg Typo\nTrebuchet MS: Trebuchet MS\nURW Bookman: URW Bookman\nURW Gothic: URW Gothic\nUbuntu: Ubuntu\nUbuntu Condensed: Ubuntu Condensed\nUbuntu Mono: Ubuntu Mono\nUmpush: Umpush\nUroob: Uroob\nVemana2000: Vemana2000\nVerdana: Verdana\nWaree: Waree\nWebdings: Webdings\nYrsa: Yrsa\nZ003: Z003\naakar: aakar\ncmb10: cmb10\ncmex10: cmex10\ncmmi10: cmmi10\ncmr10: cmr10\ncmss10: cmss10\ncmsy10: cmsy10\ncmtt10: cmtt10\ndsrom10: dsrom10\nesint10: esint10\neufm10: eufm10\nmry_KacstQurn: mry_KacstQurn\nmsam10: msam10\nmsbm10: msbm10\nori1Uni: ori1Uni\npadmaa: padmaa\npadmaa-Bold.1.1: padmaa-Bold.1.1\nrsfs10: rsfs10\nstmary10: stmary10\nwasy10: wasy10"
  },
  {
    "objectID": "draft/NYT/index.html",
    "href": "draft/NYT/index.html",
    "title": "Estilo “The Economist” en Matplotlib",
    "section": "",
    "text": "Fuente: https://cast42.github.io/blog/cast42/jupyter/altair/2022/04/18/Economist-style.html\nFonts: https://github.com/FrancesCoronel/nyt-comm/tree/master/fonts/franklin\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns;\nfrom matplotlib.font_manager import FontProperties\n\n\ndf = pd.read_csv('Economist_corbyn.csv').dropna()\n\n\ndf['Average number of likes per Facebook post 2016'] = df['Average number of likes per Facebook post 2016']/1000\n\n\n# https://python-graph-gallery.com/custom-fonts-in-matplotlib/\n\n# !!! change it to your path\npersonal_path = '/home/mato/.local/share/fonts/'\n\n# get normal font and store it in `fira_sans_regular`\nfont = 'franklin-normal-300.ttf'\nfont_path = personal_path + font\nfranklin_thin = FontProperties(fname=font_path)\n\nfont = 'franklin-normal-600.ttf'\nfont_path = personal_path + font\nfranklin_bold = FontProperties(fname=font_path)\n\n\ncolors = ['#ff80a8','#bc466b', '#9fd4e2']\ncolor_map = { \n              \"barras\": '#116ea1',\n              \"barras_seleccionadas\": '#c1dae6',\n              \"lineas\": '#7d7369',\n              \"fondo\": '#d9e9f0',\n              \"titulo\":'#5c5a5b',\n              \"rectangulo\":'#c1dae6'\n            }\n\nfig, ax = plt.subplots(figsize=(8, 8),\n#                        dpi=450,\n                       facecolor = color_map['fondo'] # Color de fondo del gráfico\n                      ) \n\n\n# Color de fondo del canvas\nax.set_facecolor(color_map['fondo'])\n\n# Gráfico\nsns.barplot(x='Average number of likes per Facebook post 2016', y='Page', data=df,\n            label=\"Total\", color=color_map['barras'], \n            zorder=3,\n            width=0.7)\n\n# Seteamos la longitud y los titulos\nax.set(\n        xlim=(0, 6.05),\n        ylabel=\"\",\n        xlabel=\"\"\n)\n\n# Seteamos qué eje mostrar\nsns.despine(left=True, bottom=True)\n\n# Definimos grid sólo horizontal, que pase por detrás de las barras\nax.grid(axis='x', zorder=0)\n\n# Definimos los labels para el eje x y el eje y\nax.set_xticks(range(0,7))\nax.set_xticklabels(labels = [0, 1, 2, 3, 4, 5, 6],font=franklin_thin, fontsize=12)\nax.set_yticks(range(0,6))\nax.set_yticklabels(labels = df['Page'].unique(),font=franklin_thin, fontsize=12)\n\n\n# Desactivamos los ticks y seteamos font y tamaño\nax.tick_params(left= False, bottom=False)\nax.xaxis.set_tick_params(labeltop=True, \n                         labelbottom=False\n                        )\n\n# Eliminamos la leyenda que Matplolib inserta por defecto\nax.get_legend().remove()\n\n# Títulos\nfig.suptitle('Left-click', \n             font=franklin_bold,\n             fontweight =\"bold\", \n             fontsize=28, \n             x=0.0240, \n             y=1.07,\n            )\nplt.title('Average number of likes per facebook post 2016, `000',\n          font=franklin_thin,\n          fontweight =\"bold\", \n          fontsize=19,\n          y=1.115, \n          x=0.245\n         )\n\n# Cuadro rojo en título\nax.add_patch(Rectangle((-1.55,-2.25), 0.68,0.15, color='#ed1c24', clip_on=False, alpha=0.7))\n\n# Cuadro celeste en sobre la primer barra\nax.add_patch(Rectangle((-1.7,-0.4), 7.7,0.81, color=color_map['barras_seleccionadas'], clip_on=False, alpha=0.7,zorder = 3))\n\n# Eliminamos los labels de los yticks y ubicamos los nuevos para que queden alienados a la izquierda\n# Y ponemos en BOLD el primero \nax.set_yticklabels([]) \nlabels = df['Page'].unique()\nfor i, yi in enumerate(df['Page']):\n    if yi !='Jeremy Corbyn':\n        ax.text(-1.60, yi, \n                labels[i], \n                horizontalalignment='left', \n                font=franklin_thin, \n                verticalalignment='center', \n                fontsize= 16)\n    else:\n        ax.text(-1.60, yi,\n                labels[i], \n                horizontalalignment='left', \n                font=franklin_bold, \n                verticalalignment='center', \n                fontsize= 16)\n\n\n\n\n\nrange(0,7)\n\nrange(0, 7)\n\n\n\nfor i in range(0,6):\n    print(i)\n\n0\n1\n2\n3\n4\n5"
  },
  {
    "objectID": "draft/Graficos del Financial Times en Python/Financial Times.html",
    "href": "draft/Graficos del Financial Times en Python/Financial Times.html",
    "title": "La bruja en la escoba",
    "section": "",
    "text": "# https://medium.com/@romandogadin/style-your-visuals-like-the-financial-times-using-plotly-3e7f1d6e293d\n\n\n# import libraries\nimport pandas as pd\nimport plotly.express as px\n\n\n# populate data\ndata_quiet_quitters = [['2009','thriving',0.12],['2012','thriving',0.13],['2013','thriving',0.14],\n                       ['2014','thriving',0.14],['2015','thriving',0.15],['2016','thriving',0.17],\n                       ['2018','thriving',0.19],['2019','thriving',0.22],['2020','thriving',0.20],\n                       ['2021','thriving',0.21],['2022','thriving',0.23],\n\n                       ['2009','quiet_q',0.61],['2012','quiet_q',0.64],['2013','quiet_q',0.65],\n                       ['2014','quiet_q',0.68],['2015','quiet_q',0.65],['2016','quiet_q',0.66],\n                       ['2018','quiet_q',0.64],['2019','quiet_q',0.61],['2020','quiet_q',0.61],\n                       ['2021','quiet_q',0.60],['2022','quiet_q',0.59],\n                       \n                       ['2009','loud_q',0.27],['2012','loud_q',0.23],['2013','loud_q',0.21],\n                       ['2014','loud_q',0.18],['2015','loud_q',0.20],['2016','loud_q',0.17],\n                       ['2018','loud_q',0.17],['2019','loud_q',0.17],['2020','loud_q',0.19],\n                       ['2021','loud_q',0.19],['2022','loud_q',0.18],\n                      ]\n\n# create data frame\ndf_qq = pd.DataFrame(\n    data=data_quiet_quitters, \n    columns=['year','type','count'])\n\n\n# define colors for the chart\ncolor_map = { \"thriving\": 'rgb(170,211,227)', # light blue\n              \"quiet_q\": 'rgb(174,78,107)',   # maroon\n              \"loud_q\": 'rgb(239,136,168)'    # pink \n                     }\n\n# famous light salmon background\ncolor_background = 'rgb(253,241,230)'\n\n# specify new legend names\nnew_legend_names = {\n    'thriving': 'Thriving at work (% engaged)',\n    'quiet_q': 'Quiet quitting (% not engaged)',\n    'loud_q': 'Loud quitting (% actively disengaged)'\n}\n\n\n# define colors for the chart\ncolor_map = { \"thriving\": 'rgb(170,211,227)', # light blue\n              \"quiet_q\": 'rgb(174,78,107)',   # maroon\n              \"loud_q\": 'rgb(239,136,168)'    # pink \n                     }\n\n# famous light salmon background\ncolor_background = 'rgb(253,241,230)'\n\n# specify new legend names\nnew_legend_names = {\n    'thriving': 'Thriving at work (% engaged)',\n    'quiet_q': 'Quiet quitting (% not engaged)',\n    'loud_q': 'Loud quitting (% actively disengaged)'\n}\n\n\n# generate chart\nfig = px.bar(\n       df_qq, \n       x='year', \n       y='count', \n       color='type', \n       color_discrete_map = color_map,\n       text_auto='.0%',                # show data labels\n    )\n\n\nfig.update_layout(\n        font_family=\"Outfit\",\n        font_size = 13,\n        plot_bgcolor=color_background,  # change background color\n        yaxis={'tickformat': '.0%'},    # convert Y marks to % \n        legend_title=None,              # remove legend title\n        xaxis_title=None,               # remove X title\n        yaxis_title=None,               # remove Y title\n        legend_traceorder=\"reversed\",   # change legend order\n        title=\"'Quiet quitters' make up the majority of employees globally\"\n       )\n\n\n                                                \n\n\n\n# standardize font color\nfig.update_traces(\n        textfont_color='white'    # set data labels color \n                 )\n\n\n                                                \n\n\n\n# rename legend and hover-over text\nfig.for_each_trace(lambda t: t.update(name = new_legend_names[t.name],\n                                      legendgroup = new_legend_names[t.name],\n                                      hovertemplate = t.hovertemplate.replace(t.name, new_legend_names[t.name])))\n\n\n                                                \n\n\n\n# update X axis\nfig.update_xaxes(\n    ticks=\"outside\",                    # place ticks outside X-axis\n    ticklen=5,                          # ticks length\n    tickcolor='rgb(195,186,178)',       # ticks color\n    linecolor='rgb(203,193,185)'        # axis color\n)\n\n\n                                                \n\n\n\n# update Y axis\nfig.update_yaxes(\n    anchor=\"free\",                      # allows axis repositioning\n#     shift= -10,                         # shift tick labels left by 10 pixels\n    gridcolor=\"rgb(228,217,208)\"\n)"
  },
  {
    "objectID": "posts/storytelling-with-data/index.html",
    "href": "posts/storytelling-with-data/index.html",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficas. Pone el énfasis en pensar qué querés mostrar, para qué, cómo y a quién. Y lo explica a través de casos y gráficos, llevando las visualizaciones a un nivel Supremo.\nTiene una cosa muy interesante. Desde el principio se apoya en 3 o 4 gráficos puntuales, y a medida que se avanza en la lectura, los va mejorando con las herramientas que se van mostrando en cada capítulo. Eso genera que termines muy manija, y tengas un puñado de gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de Python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en este mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en Python y con Matplotlib. Aunque no lo crean, el patriota vino de Namibia (?)\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nAl meter mano, pude ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) dividida por el punto (fecha en el caso que estamos analizando). En el dataframe tenemos las series completas. Pero en luego creamos dos series mas pequeñas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero nos permite mostrar los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado."
  },
  {
    "objectID": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "href": "posts/storytelling-with-data/index.html#arte-arte-arte.",
    "title": "Storytelling with data",
    "section": "",
    "text": "Marta\n\n\nSi, eso. Nadie saber hacer un gráfico como la gente.\nYo, el peor de todos.\nPor eso, me entregué al libro “Storytelling with Data: A Data Visualization Guide for Business Professionals” de Cole Nussbaumer Knaflic.\nResumen? Maravilloso. Sin profundizar en ninguna herramienta (Excel, PowerBi, Python, R, etc.) ofrece una visión general de como contar una historia con herramientas gráficas. Pone el énfasis en pensar qué querés mostrar, para qué, cómo y a quién. Y lo explica a través de casos y gráficos, llevando las visualizaciones a un nivel Supremo.\nTiene una cosa muy interesante. Desde el principio se apoya en 3 o 4 gráficos puntuales, y a medida que se avanza en la lectura, los va mejorando con las herramientas que se van mostrando en cada capítulo. Eso genera que termines muy manija, y tengas un puñado de gráficos en la cabeza que quieras aplicar hasta para pagar el Impuesto Inmobiliario en ARBA.\nEl desafío es, entonces, bajar esos conceptos y gráficos a las herramientas que usa cada uno. Yo, como usuario de Python, me puse a buscar a algún patriota que se haya tomado ese trabajo.\nY como lo que sobra en este mundo son patriotas, encontre al bueno de @phillipheita y su artículo en Médium Storytelling with data in Python, donde intenta replicar uno de los gráficos insignias del libro en Python y con Matplotlib. Aunque no lo crean, el patriota vino de Namibia (?)\nCómo siempre, Murphy está presente. El resultado de su código no me quedaba nada similar al del libro, así que tuve que meter un poco de mano.\nAl meter mano, pude ver la cantidad de parámetros que se pueden configurar en Matplotlib. Podés modificar absolutamente todo. Al principio te mareas, pero después…sos un artista.\nA continuación una imágen del gráfico del libro.\n\n\n\nGráfico original del libro\n\n\nEl truco es tener cada serie de datos (received y processed) dividida por el punto (fecha en el caso que estamos analizando). En el dataframe tenemos las series completas. Pero en luego creamos dos series mas pequeñas, sólo con los datos a los cuales le queremos poner el label. Las lineas se superponen, por lo que tener 4 series no cambia en nada el aspecto visual, pero nos permite mostrar los labels de las segundas y mas pequeñas series.\nPara completar, mucha artesanía. Dibujamos una línea vertical, y agregamos el texto descriptivo en la ruptura de las series. Acomodamos los labels para que no pisen las líneas, y formateamos ejes y texto. Al final, el resultado."
  },
  {
    "objectID": "posts/storytelling-with-data/index.html#código",
    "href": "posts/storytelling-with-data/index.html#código",
    "title": "Storytelling with data",
    "section": "Código",
    "text": "Código\n\n## Importamos librerias\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns;sns.set_style()\n\n\ndf = pd.DataFrame({'Month':['January','February','March','April','May','June','July','August','September','October','November','December'],\n                   'Ticket_Volume_Received':[160,184,241,149,180,161,132,202,160,139,149,177],\n                   'Ticket_Volume_Processed':[160,184,237,148,181,150,123,156,126,104,124,140]})\nnames= ['January','February','March','April','May','June','July','August','September','October','November','December']\nnames2= ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n\ny_data = [202,160,139,149,177]\nx_data = [7, 8, 9, 10, 11]\nn = [202,160,139,149,177]\n\ny1_data = [156,126,104,124,140]\nx1_data = [7, 8, 9, 10, 11]\nn1 = [156,126,104,124,140]\n\n\n\n\nmarkers_on = [202,160,139,149,177]\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\n\n# Varaibles que definen el subconjunto de datos que será graficada en otra línea\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Received'],\n             lw=4,\n             color='#808080',\n             ax=ax\n            )\nsns.lineplot(data=df, x = df.index,y=df['Ticket_Volume_Processed'],\n             lw=4,\n             color='#000088',\n             ax=ax\n            )\n\n# Serie que define a que punto le ponemos lables. Esto es a partir del mes 7 (o posición 7 del eje x)\nsns.lineplot(x=x_data,y=y_data,marker='o',markersize=10,color='#808080',ax=ax)\nsns.lineplot(x= x1_data,y= y1_data,marker='o',markersize=10,color='#000088',ax=ax)\n\n# Eliminamos el eje x (top) e y (right)\nsns.despine()\n\n# Definimos los colores de los ejes visibles x e y\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Leyenda manual de las líneas\nax.text(12.6, 180, 'Received', ha='right', va='top', fontsize=20,color='#808080')\nax.text(12.7, 145, 'Processed', ha='right', va='top', fontsize=20,color='#000088')\n\n# Texto\nax.annotate(\"2 employees quit in May. We nearly kept up with incoming calls\\nin the following two months,\\\n but fell behind with the increase in\\nAug and haven't been able to catch up since.\",\n             xy=(4,60),xytext=(4,260),color='#616161',fontsize=18)\n\n# No ponemos titulo al eje Y. mas abajo le asignamos \"Number of calls\"\nplt.ylabel('')\n\n# Longitud del tick del eje y\nax.yaxis.set_tick_params(\n                        length=6\n                        )\n\n# Ancho de la línea de los ejes x e y\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n# Color y largo de las tick lines de ambos ejes\nax.tick_params(axis='x', color='#616161', pad=3)\n\n# Eliminamos los ticks del eje x\nax.tick_params(bottom = False) \n\n\n# Color y tamaño de la fuente del texto de las ticklines del eje x e y\nplt.xticks(fontsize=16, ha='left', color='#616161')\nplt.yticks(fontsize=16, color='#616161')\n\n# Posición de los labels de los ejes x e y\nax.set_ylabel('Number of Calls', loc='top',fontsize=16,color='#616161')\nax.set_xlabel('2014', loc='left', fontsize=16, color='#616161')\n\n# Sacamos el valor 0 del eje x para que no arranque en enero\nplt.xlim(-0.05,11.5)\nplt.ylim(0,300)\n\n# Linea vertical\nplt.axvline(x=4, ymin=0, ymax=0.85, color='#616161', alpha=0.3)\n\n# Labels de los puntos del eje x (remplazamos números por meses)\nax.set(xticks=range(0, 12), xticklabels=list(names2))\n\n# Etiquetamos los puntos de la linea corta azul\nfor i, txt in enumerate(n):\n    ax.annotate(txt, (x_data[i]-0.2, y_data[i]+10),fontsize=16, color='#808080')\n    \n# Etiquetamos los puntos de la linea corta gris\nfor i, txt in enumerate(n1):\n    ax.annotate(txt, (x1_data[i]+0.25, y1_data[i]-20),\n                fontsize=16, \n                color='#000088',\n                ha='right', \n               )\n\n# Texto descriptivo\nfig.text(\n        0.05, 0.000,\n        'Data source: XYZ Dashboard, as of 12/31/2014 | A detailed analysis on tickets processed per person and time to resolve issues was undertaken to inform \\nthis request and can be provided if needed.',\n        fontsize=12,\n        color='#808080');\n\n\n# Títulos\nfig.suptitle('Please approve the hire of 2 employees', fontweight =\"bold\", fontsize=24, \n             x=0.32, y=1.05,\n             color='#5c5a5b', \n            )\nplt.title('to backfill those who quit in the past year',fontsize=16,color='#616161',\n          y=1.105, x=0.130\n         );\n\n\n\n\nEsta es mi aproximación…"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "sankey\n\n\nHace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más que se me pasó por alto en la búsqueda)\nMe quedé con Plotly, aunque siempre prefiero Matplolib porque es mucho mas personalizable. En general, cuando el gráfico no es para integrar a un dashboar, Matplotlib cumple. Pero en este caso, el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nPara lograr el resultado esperado, es necesario tener en cuenta que el Diagrama de Sankey está compuesto por dos tipos de elementos:\n\nNodos: Bloques estáticos con un nombre.\nLinks: conección entre nodos que lleva cierto valor de un nodo a otro.\n\nEn plotly, lo traducimos como:\n\n´source´: Es el nodo de inicio. No es necesario tener multiples ´sources´ para tener mas profundidad.\n´target´: Es el nodo al que ´source´ se conecta.\n´value´: Es el volumen del flujo que conecta ´source´ y ´target´. Va a marcar el grosos de las líneas conectoras del diagrama.\n\nComo hay nodos que cumplen las dos funciones (los nodos intermedios, que reciben y envían información), el mismo nodo aparece en las columnas source y target.\nEn el ejemplo que vamos a trabajar, el flujo arranca desde la Finalidad-Función (source) hacia las Jurisdicciones (target). Luego, desde las Jurisdicciones (source) hacia los Servicios (target). Y por último, de los Servicios (source) a los Programas (target). Todas estas etapas tienen un valor asignado de crédito. El primero, el que sale de la Finalidad-Función hacía la Jurisdicción, incluye el total del crédito para esa Finalidad-Función en esa jurisdicción, que luego se desgrana entre servicios y programas. En el código, esos valores (crédito) lo obtenemos con los diferentes groupby para cada etapa.\nA continuación dejo el código con algunos comentarios. La base que subí ya tiene un pre proceso de ordenamiento y limpieza. Trabajé sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizada a la ejecución del 31/12/2023.\nLa base resultante está disponible en Github"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html#cómo-se-llaman-esos-gráficos",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "",
    "text": "sankey\n\n\nHace un tiempo necesitaba hacer unos gráficos con presupuesto.\nNo tenía mucha ídea que quería graficar, pero si sabía que tenia que usar datos de presupuesto de la Administración Pública Nacional.\nNo tenía mucha idea que quería demostrar, pero si sabía que tenía que mostrar ciertos flujos de créditos.\nSin mucha más precisión que esa, me puse a pensar, seguramente mal, y de atrás para adelante, en algún tipo de herramienta que me permita ayudar a mostrar lo que todavía no sabía que era.\nMe acordaba que en uno de mis subreddits preferidos, Data is Beautiful, siempre mostraban un tipo de gráfico muy particular. Fui al subreddit, scrollee a lo loco, y obviamente, Murphy no falla, no encontré nada. Pero por suerte, muchos kilómetros de página para abajo encontré uno. Era sólo el gráfico, con una muy breve descripción de lo que mostraba. Pero no decía que tipo de gráfico usaba.\nPregunté en ese post, sin respuesta. Pero por suerte siempre está la búsqueda inversa de google, donde le subí la imagen del gráfico y me tiró muchisimas similares, y en alguna decís “Sankey Diagram”. EN TU CARA (introducir nombre que corresponda)\nNo desesperen, hoy se le tiran la imagen a cualquier motor de AI y te devuelve hasta el código…\nYa con el nombre en la cabeza, una búsqueda en google para ver que librerias de python eran capaces de reproducirlo. Encontré algunas:\n\nMatplolib\nPlotly\nHoloview\nFloweaver\n\n(debe existir alguna más que se me pasó por alto en la búsqueda)\nMe quedé con Plotly, aunque siempre prefiero Matplolib porque es mucho mas personalizable. En general, cuando el gráfico no es para integrar a un dashboar, Matplotlib cumple. Pero en este caso, el resultado era demasiado simple, y no mostraba lo que necesitaba.\nHoloviews no me convenció, Floweaver lo vi tarde…y me incliné por Plotly. Siguiendo este artículo pude ir armando la configuración.\nPara lograr el resultado esperado, es necesario tener en cuenta que el Diagrama de Sankey está compuesto por dos tipos de elementos:\n\nNodos: Bloques estáticos con un nombre.\nLinks: conección entre nodos que lleva cierto valor de un nodo a otro.\n\nEn plotly, lo traducimos como:\n\n´source´: Es el nodo de inicio. No es necesario tener multiples ´sources´ para tener mas profundidad.\n´target´: Es el nodo al que ´source´ se conecta.\n´value´: Es el volumen del flujo que conecta ´source´ y ´target´. Va a marcar el grosos de las líneas conectoras del diagrama.\n\nComo hay nodos que cumplen las dos funciones (los nodos intermedios, que reciben y envían información), el mismo nodo aparece en las columnas source y target.\nEn el ejemplo que vamos a trabajar, el flujo arranca desde la Finalidad-Función (source) hacia las Jurisdicciones (target). Luego, desde las Jurisdicciones (source) hacia los Servicios (target). Y por último, de los Servicios (source) a los Programas (target). Todas estas etapas tienen un valor asignado de crédito. El primero, el que sale de la Finalidad-Función hacía la Jurisdicción, incluye el total del crédito para esa Finalidad-Función en esa jurisdicción, que luego se desgrana entre servicios y programas. En el código, esos valores (crédito) lo obtenemos con los diferentes groupby para cada etapa.\nA continuación dejo el código con algunos comentarios. La base que subí ya tiene un pre proceso de ordenamiento y limpieza. Trabajé sobre las que la Secretaría de Hacienda disponibiliza en Presupuesto Abierto. Está actualizada a la ejecución del 31/12/2023.\nLa base resultante está disponible en Github"
  },
  {
    "objectID": "posts/diagrama-de-sankey-y-presupuesto/index.html#código",
    "href": "posts/diagrama-de-sankey-y-presupuesto/index.html#código",
    "title": "Prespuesto con Diagramas de Sankey",
    "section": "Código",
    "text": "Código\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n\ndf = pd.read_parquet('datos_sankey.parquet')\n\n\n# Filtramos la partida (la finalidad-función ya está filtrada en la base que cargamos)\ndf = df.loc[(df['inciso_id']==5) & (df['principal_id']==8) & (df['parcial_id']==1)]\n\n\ndf_grafico = df.groupby(['fin-fun','jurisdiccion_desc','servicio_desc','programa_desc']).agg(**{\n                                'credito_vigente_sum': ('credito_vigente', 'sum')\n                                }).reset_index()\n\n# 1-[fin-fun]=&gt;[jurisdiccion_desc]\ndf1 = df_grafico.groupby(['fin-fun', 'jurisdiccion_desc'])['credito_vigente_sum'].sum().reset_index()\ndf1.columns = ['source', 'target', 'value']\n\n# 2-[jurisdiccion_desc]=&gt;[servicio_desc]\ndf2 = df_grafico.groupby(['jurisdiccion_desc', 'servicio_desc'])['credito_vigente_sum'].sum().reset_index()\ndf2.columns = ['source', 'target', 'value']\n\n\n# 3-[servicio_desc]=&gt;[programa_desc]\ndf3 = df_grafico.groupby(['servicio_desc', 'programa_desc'])['credito_vigente_sum'].sum().reset_index()\ndf3.columns = ['source', 'target', 'value']\n\n# Juntamos toda la información en un DF: \nall_links = pd.concat([\n    df1, \n    df2,\n    df3\n], axis=0)\nall_links_desc = all_links.copy()\n\n# Para usar el parámetro 'label'\n# https://sparkbyexamples.com/pandas/pandas-find-unique-values-from-columns\nunique_source_target = list(pd.unique(all_links[['source', 'target']].values.ravel('K')))\n\n# Asignamos un número único a cada source y target\nmapping_dict = {k: v for v, k in enumerate(unique_source_target)}\n\n# Mapeamos todos los datos\nall_links['source'] = all_links['source'].map(mapping_dict)\nall_links['target'] = all_links['target'].map(mapping_dict)\n\n# Convertimos el dataframe a una lista para poder utilizarlo en plotly\nlinks_dict = all_links.to_dict(orient='list')\n\n# Código del Diagrama de Sankey Diagram \nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n        pad = 100, # Espacio vertical entre los nodos terminales\n        thickness = 10, # Ancho del rectángulo de los nodos\n        line = dict(color = \"black\", width = 1), # Línea que rodea el rectángulo de los nodos\n        label = unique_source_target,\n        color =['#6db9aa', '#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    ),\n    link = dict(\n        source = links_dict[\"source\"],\n        target = links_dict[\"target\"],\n        value = links_dict[\"value\"],\n        color = ['#d9ffe5', '#92fff8', '#a6e6b4', '#56d1c7','#73cc83','#8dd99c', '#37b9ae', '#19a295']\n    )\n)])\n\nfig.update_layout(\n    title='&lt;span style=\"font-size: 30px;\"&gt;Ejecución de Partidas&lt;/span&gt;' + '&lt;br&gt;' +  '&lt;span style=\"font-size: 12px;\"&gt;5.8.1 Serv. Sociales - Vivienda y Urbanismo - Diferentes jurisdicciones&lt;br&gt;&lt;/span&gt;')\n\nfig.show()"
  },
  {
    "objectID": "draft/Graficos del Financial Times en Python/index.html",
    "href": "draft/Graficos del Financial Times en Python/index.html",
    "title": "Estilo “Financial Times” en Matplotlib",
    "section": "",
    "text": "https://medium.com/@romandogadin/style-your-visuals-like-the-financial-times-using-plotly-3e7f1d6e293d\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns;\n\n\ndata_quiet_quitters = [['2009','thriving',0.12],['2012','thriving',0.13],['2013','thriving',0.14],\n                       ['2014','thriving',0.14],['2015','thriving',0.15],['2016','thriving',0.17],\n                       ['2018','thriving',0.19],['2019','thriving',0.22],['2020','thriving',0.20],\n                       ['2021','thriving',0.21],['2022','thriving',0.23],\n\n                       ['2009','quiet_q',0.61],['2012','quiet_q',0.64],['2013','quiet_q',0.65],\n                       ['2014','quiet_q',0.68],['2015','quiet_q',0.65],['2016','quiet_q',0.66],\n                       ['2018','quiet_q',0.64],['2019','quiet_q',0.61],['2020','quiet_q',0.61],\n                       ['2021','quiet_q',0.60],['2022','quiet_q',0.59],\n                       \n                       ['2009','loud_q',0.27],['2012','loud_q',0.23],['2013','loud_q',0.21],\n                       ['2014','loud_q',0.18],['2015','loud_q',0.20],['2016','loud_q',0.17],\n                       ['2018','loud_q',0.17],['2019','loud_q',0.17],['2020','loud_q',0.19],\n                       ['2021','loud_q',0.19],['2022','loud_q',0.18],\n                      ]\n\n# create data frame\ndf = pd.DataFrame(\n    data=data_quiet_quitters, \n    columns=['year','type','count'])\n\n\n# https://python-graph-gallery.com/custom-fonts-in-matplotlib/\n\nfrom matplotlib.font_manager import FontProperties\n\n# !!! change it to your path\npersonal_path = '/home/mato/.local/share/fonts/'\n\n# get normal font and store it in `Outfit`\nfont_path = personal_path + 'Outfit-Black.ttf'\noutfit = FontProperties(fname=font_path)\n\nFalta: - Font outfit, mas ‘bold’, pero no tan ‘bold’ - Thicks hacia abajo en el eje x - Leyendas sin recuadro\nListar fonts en terminal: fc-list | grep “Outfit”\n\nlabels=''\n# Definimos la paleta de color para las barras\n# colors = [\"#ae4e6b\",\"#aad3e3\",\"#ef88a8\"] \ncolors = ['#ff80a8','#bc466b', '#9fd4e2']\ncolor_map = { \n#               \"lineas\": '#e4d9d0',\n              \"lineas\": '#7d7369',\n              \"fondo\": '#fdf1e6',\n              \"titulo\":'#5c5a5b'\n            }\n\nsns.set_palette(sns.color_palette(colors))\n\nfig, ax = plt.subplots(figsize=(15, 7),\n                       dpi=300,\n                       facecolor = color_map['fondo']) # Color de fondo del gráfico\n\nax = sns.histplot(df, x='year', \n                  hue='type', \n                  weights='count',\n                  multiple='stack', \n                  shrink=0.9,\n                  edgecolor=color_map['fondo'], # Color del borde de las barras \n                  linewidth=3.5,\n                  zorder=3\n                  )\n\n# Margen\nax.margins(0.01, 0)  \n\n# Definimos grid sólo horizontal\nax.grid(axis='y', zorder=0)\n\n# Color de fondo del canvas\nax.set_facecolor(color_map['fondo'])\n\n# Color de la línea del eje x\nax.spines['bottom'].set_color(color_map['lineas'])\n\n# Labels sobre las barras\n# https://stackoverflow.com/questions/41296313/stacked-bar-chart-with-centered-labels\n# https://stackoverflow.com/questions/78269028/place-labels-on-top-of-each-stacked-bar-and-set-font-color-in-matplotlib/78269292\nfor c in ax.containers:\n    labs = [f'{r.get_height():.0%}' if r.get_height() &gt; 0 else '' for r in c]\n    ax.bar_label(c, labs, color='w', padding=-20, weight = 'bold')\n    \n# Longitud del tick del eje y\nax.xaxis.set_tick_params(\n                        length=6,\n                        color= color_map['lineas']\n)\nax.yaxis.set_tick_params(\n                        length=0,\n                        color= color_map['lineas']\n)\n# Labels de los ticks del eje y\nax.set_yticks([0,.2,.40,.60,.80,1])\nax.set_yticklabels(['0%','20%','40%','60%','80%','100%'])\n# Font de los ticks\nplt.xticks(font=outfit)\nplt.yticks(font=outfit);\n# Colores de los ticks names\nax.tick_params(colors=color_map['lineas']) # Puede incluir axis='x' para sólo colorear el eje x\n\n# No ponemos titulo al eje Y ni al X\nplt.ylabel('')\nplt.xlabel('')\n\n# Eliminamos el eje x (top), y (right) e y (left)\nax.spines['bottom'].set_linewidth(1)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Eliminamos la leyenda que Matplolib inserta por defecto\nax.get_legend().remove()\n\n# Leyendas\nfig.legend(\n           bbox_to_anchor=(0.31, 1.03),\n           fancybox = True,\n           fontsize='medium', \n           labels=['Loud quitting (% actively disengaged)',\n                   'Quiet quitting (% not engaged)',\n                   'Thriving at work (% engaged)',],\n           edgecolor = color_map['fondo'],\n           facecolor = 'none'\n)\n\n# Coordinadas para linea negra y cuadro ojo\ny_pos = 1.25\nx_pos = -0.95\n# Linea negra sobre título\nax.add_patch(Rectangle((x_pos,y_pos+0.08),1,0.01,color='black', clip_on=False))\n# Cuadro rojo en título\nax.add_patch(Rectangle((x_pos,y_pos-0.01),2.32,0.07,color='#bc4668', clip_on=False, alpha=0.7))\n\n# Títulos\nplt.suptitle(\"'Quiet quitters' make up the majority of employees globally\", \n             fontsize=24, \n             y=y_pos-0.14, x=0.41,\n             color=color_map['titulo'], \n             font=outfit,\n            );\n\n\n\n\n\n\ndata = [['2005','A',.10],['2006','A',.15],['2007','A',.10],\n                       ['2005','B',.15],['2006','B',.70],['2007','B',.10],\n                       ['2005','C',.75],['2006','C',.15],['2007','C',.80]\n                      ]\n\n\ndf = pd.DataFrame(\n    data=data, \n    columns=['year','type','count'])\n\n\nfig, ax = plt.subplots(figsize=(15, 7),facecolor = '#fdf1e6')\nax.set_facecolor('#fdf1e6')\n\nax = sns.histplot(df, x='year', \n                  hue='type', \n                  weights='count',\n                  multiple='stack', \n                  shrink=1,\n                  linewidth=3.5,\n                  zorder=3\n                  )\n\n\n# Definimos grid sólo horizontal\n# plt.grid(False)\nax.grid(axis='y', zorder=0)\n\nax.get_legend().remove()\n\nfor c in ax.containers:\n    ax.bar_label(c, fmt=lambda x: f'{x:.0%}' if x &gt; 0 else '')"
  },
  {
    "objectID": "draft/NYT/2022-04-18-Economist-style.html",
    "href": "draft/NYT/2022-04-18-Economist-style.html",
    "title": "“Reconstructing Economist graph with Altair”",
    "section": "",
    "text": "“#30DayChartChallenge #altair #day12”\n\n\ntoc: true\nbranch: master\nbadges: true\ncomments: true\nauthor: Lode Nachtergaele\ncategories: [cast42, jupyter, altair]\nimage: images/Economist_stye%3B_30dayschartchallenge_day12.png\n\nIn an Economist article “The metamorphosis: How Jeremy Corbyn took control of Labour”, the following graph appeared:\n\nLater, Sarah Leo, data visualiser at The Economist, improved the graph to:\n The rationale behind this improvement is discussed in her article: ‘Mistakes, we made a few’.\nIn this article, I show how visualisation library Altair can be used to reconstruct the improved graph.\n\nimport numpy as np\nimport pandas as pd\nimport altair as alt\n\nRead the data for the graph into a Pandas dataframe:\n\ndf = pd.read_csv('Economist_corbyn.csv').dropna()\n\nThis is how the data looks:\n\ndf\n\n\n\n\n\n\n\n\nPage\nAverage number of likes per Facebook post 2016\n\n\n\n\n0\nJeremy Corbyn\n5210\n\n\n1\nLabour Party\n845\n\n\n2\nMomentum\n229\n\n\n3\nOwen Smith\n127\n\n\n4\nAndy Burnham\n105\n\n\n5\nSaving Labour\n56\n\n\n\n\n\n\n\nA standard bar graph in Altair gives this:\n\nalt.Chart(df).mark_bar().encode(\n    x='Average number of likes per Facebook post 2016:Q',\n    y='Page:O'\n)\n\n\n\n\n\n\nThe message of the graph is that Jerermy Corbyn has by far the most likes per Facebook post in 2016. There are a number of improvements possible:\nThe number on the x-axis are multiple of thousands. In spirit of removing as much inkt as possible, let’s rescale the x-asis with factor 1000. The label ‘Page’ on the y-axis is superfluous. Let’s remove it.\n\ndf['page1k'] = df['Average number of likes per Facebook post 2016']/1000.0\n\nAfter scaling the graphs looks like this:\n\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k', title='Average number of likes per Facebook post 2016'),\n    y=alt.Y('Page:O', title='')\n)\n\n\n\n\n\n\nA third improvement is to sort the bars from high to low. This supports the message, Jeremy Corbyn has the most clicks.\n\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k:Q', title='Average number of likes per Facebook post 2016'),\n    y=alt.Y('Page:O', title='', sort=alt.EncodingSortField(\n            field=\"Average number of likes per Facebook post 2016:Q\",  # The field to use for the sort\n            op=\"sum\",  # The operation to run on the field prior to sorting\n            order=\"ascending\"  # The order to sort in\n        ))\n)\n\n\n\n\n\n\nNow, we see that we have to many ticks on the x-axis. We can add a scale and map the x-axis to integers to cope with that. While adding markup for the x-axis, we add orient=‘top’. That move the xlabel text to the top of the graph.\n\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k:Q', title='Average number of likes per Facebook post 2016',\n            axis=alt.Axis(title='Average number of likes per Facebook post 2016', orient=\"top\", format='d', values=[1,2,3,4,5,6]),\n            scale=alt.Scale(round=True, domain=[0,6])),\n    y=alt.Y('Page:O', title='', sort=alt.EncodingSortField(\n            field=\"Average number of likes per Facebook post 2016:Q\",  # The field to use for the sort\n            op=\"sum\",  # The operation to run on the field prior to sorting\n            order=\"ascending\"  # The order to sort in\n        ))\n)\n\n\n\n\n\n\nNow, we want to remove the x-axis itself as it adds nothing extra. We do that by putting the stroke at None in the configure_view. We also adjust the x-axis title to make clear the numbers are multiples of thousands.\n\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k:Q', title=\"Average number of likes per Facebook post 2016  ('000)\",\n            axis=alt.Axis(title='Average number of likes per Facebook post 2016', orient=\"top\", format='d', values=[1,2,3,4,5,6]),\n            scale=alt.Scale(round=True, domain=[0,6])),\n    y=alt.Y('Page:O', title='', sort=alt.EncodingSortField(\n            field=\"Average number of likes per Facebook post 2016:Q\",  # The field to use for the sort\n            op=\"sum\",  # The operation to run on the field prior to sorting\n            order=\"ascending\"  # The order to sort in\n        ))\n).configure_view(\n    stroke=None, # Remove box around graph\n)\n\n\n\n\n\n\nNext we try to left align the y-axis labels:\n\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k:Q',\n            axis=alt.Axis(title=\"Average number of likes per Facebook post 2016  ('000)\", orient=\"top\", format='d', values=[1,2,3,4,5,6]),\n            scale=alt.Scale(round=True, domain=[0,6])),\n    y=alt.Y('Page:O', title='', sort=alt.EncodingSortField(\n            field=\"Average number of likes per Facebook post 2016:Q\",  # The field to use for the sort\n            op=\"sum\",  # The operation to run on the field prior to sorting\n            order=\"ascending\"  # The order to sort in\n        ))\n).configure_view(\n    stroke=None, # Remove box around graph\n).configure_axisY(\n    labelPadding=70, \n    labelAlign='left'\n)\n\n\n\n\n\n\nNow, we apply the Economist style:\n\nsquare = alt.Chart().mark_rect(width=50, height=18, color='#EB111A', xOffset=-105, yOffset=10)\n\nbars = alt.Chart(df).mark_bar().encode(\n    x=alt.X('page1k:Q',\n            axis=alt.Axis(title=\"\", orient=\"top\", format='d', values=[1,2,3,4,5,6], labelFontSize=14),\n            scale=alt.Scale(round=True, domain=[0,6])),\n    y=alt.Y('Page:O', title='', sort=alt.EncodingSortField(\n            field=\"Average number of likes per Facebook post 2016:Q\",  # The field to use for the sort\n            op=\"sum\",  # The operation to run on the field prior to sorting\n            order=\"ascending\"  # The order to sort in\n        ),\n        # Based on https://stackoverflow.com/questions/66684882/color-some-x-labels-in-altair-plot\n        axis=alt.Axis(labelFontSize=14, labelFontStyle=alt.condition('datum.value == \"Jeremy Corbyn\"', alt.value('bold'), alt.value('italic'))))\n).properties(title={\n      \"text\": [\"Left Click\", ], \n      \"subtitle\": [\"Average number of likes per Facebook post\\n\", \"2016, '000\"],\n      \"align\": 'left',\n      \"anchor\": 'start'\n    }\n)\n\nsource = alt.Chart(\n    {\"values\": [{\"text\": \"Source: Facebook\"}]}\n).mark_text(size=12, align='left', dx=-120, color='darkgrey').encode(\n    text=\"text:N\"\n)\n\n# from https://stackoverflow.com/questions/57244390/has-anyone-figured-out-a-workaround-to-add-a-subtitle-to-an-altair-generated-cha\nchart = alt.vconcat(\n    square,\n    bars,\n    source\n).configure_concat(\n    spacing=0\n).configure(\n    background='#D9E9F0'\n).configure_view(\n    stroke=None, # Remove box around graph\n).configure_axisY(\n    labelPadding=110,\n    labelAlign='left',\n    ticks=False,\n    grid=False\n).configure_title(\n    fontSize=22,\n    subtitleFontSize=18,\n    offset=30,\n    dy=30\n)\n\nchart\n\n\n\n\n\n\nThe only thing, I could not reproduce with Altair is the light bar around the the first label and bar. For those final touches I think it’s better to export the graph and add those finishing touches with a tool such as Inkscape or Illustrator."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]